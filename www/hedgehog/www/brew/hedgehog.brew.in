<%
# 
# Copyright 2014, 2015, 2016 Internet Corporation for Assigned Names and Numbers.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Developed by Sinodun IT (www.sinodun.com)
#

# Debug mode set to 1, set to 0 to disable
hh_debug <<- 0

# TODO(refactor): preparing and executing DB queries should be wrapped better and in a dbQuery.R file
# TODO: use either tabs or spaces for indentation - we have both at the moment

# Initialise the static/interactive default type
initPltType <- function() {
	
	if (hh_debug) {
	    system('logger -p user.notice Hedgehog: In initPltType')
    }

    %><%=gui_config$www$default_plot_type%><%
}

# Initialise the Plot drop down menu contents
initPlotDDHtml <- function() {
	
	if (hh_debug) {
	    system('logger -p user.notice Hedgehog: In initPlotDDHtml')
    }

	# TODO: These queries should only return plots that are configured for display
	# Especially as not everyone will want the RSSAC plots showing
    if (!(prepStmnt("getpltddcategories", dsccon)) || !(prepStmnt("getpltid_ddname", dsccon))){
        %><option value="DB error">DB error preparing plot type query</option><%
        return(FALSE)
    }
   
    df <- dbGetDataFrame(dbdrv, dsccon, dbconstr, "EXECUTE getpltddcategories;")
 
    if (is.null(df)) {
        %><option value="DB error">DB connection error</option><%
        return(FALSE)
    } 
	else if (nrow(df) < 1) {
    	%><option value="DB error">No plots found in DB</option><%
        return(FALSE)
    }
	
	for (i in 1:nrow(df)) {
		df2 <- dbGetDataFrame(dbdrv, dsccon, dbconstr, paste("EXECUTE getpltid_ddname('", df[i,1], "');", sep=""))
		if (is.null(df2)) {
			%><option value="DB error">DB connection error</option><%
			return(FALSE)
		} 
		else if (nrow(df2) < 1) {
			%><option value="DB error">No data found in DB</option><%
			return(FALSE)
		}
		optgroup_html <- sub(".*\\.","",df[i,1])
		%><optgroup label="<%=optgroup_html%>"><%
		for (i in 1:nrow(df2)) {
			%><option value="<%=df2[i,1]%>"><%=df2[i,2]%></option><%
		}
		%></optgroup><%
	}
    return(TRUE)
}

# Initialise the server drop down menu contents
initServerDDHtml <- function() {
	
	if (hh_debug) {
	    system('logger -p user.notice Hedgehog: In initServerDDHtml')
    }

    if (!(prepStmnt("getsrvrid_display_name", dsccon))) {
        %><option value="DB error">DB error preparing server query</option><%
        return(FALSE)
    }
    
    df <- dbGetDataFrame(dbdrv, dsccon, dbconstr, "EXECUTE getsrvrid_display_name;")
    
    if (is.null(df)) {
        %><option value="DB error">DB connection error</option><%
        return(FALSE)
    } 
	else if (nrow(df) < 1) {
    	%><option value="DB error">No servers found in DB</option><%
        return(FALSE)
    }
    
    for (i in 1:nrow(df)) {
		%><option value="<%=df[i,1]%>"><%=df[i,2]%></option><%
	}
    return(TRUE)
}

getDefaultServer <- function() {
  
  if (hh_debug) {
      system('logger -p user.notice Hedgehog: In getDefaultServer')
  }
  
    # Calling code checks for no server specified
  %><%=gui_config$www$default_server%><%

  return(TRUE)
}

# Generate a nested JSON structure the js code can use to create the node tabs
initNodeData <- function() {
    if (hh_debug) {
        system('logger -p user.notice Hedgehog: In initNodeTabsHtml')
    }

    if (!(prepStmnt("getsrvrid_display_name", dsccon)) || !(prepStmnt("getgroups", dsccon)) || !(prepStmnt("getnodes", dsccon)) || !(prepStmnt("getnodesbyregion", dsccon))) {
        %>DB error preparing node query<%
        return(FALSE)
    }

    server=list()
    servers_df <- dbGetDataFrame(dbdrv, dsccon, dbconstr, "EXECUTE getsrvrid_display_name;")
    if (!is.null(servers_df) && nrow(servers_df) >= 1) {
        for (s in 1:nrow(servers_df)) {
            group_list=list()
            srvr_id <- servers_df[s,1]
            srvr_nm <- servers_df[s,2]
            groups_df <- dbGetDataFrame(dbdrv, dsccon, dbconstr, paste("EXECUTE getgroups(", srvr_id, ");", sep=""))
            
            for (g in 0:nrow(groups_df)) {
                nodes=list()
                if (g == 0) {
                    gp_nm = 'All'
                    nodes_df <- dbGetDataFrame(dbdrv, dsccon, dbconstr, paste("EXECUTE getnodes(", srvr_id, ");", sep=""))
                } else {
                    gp_nm <- groups_df[g,1]
                    # Other should really appear at the end of the list......
                    if  (gp_nm == 'Other'){
                        nodes_df <- dbGetDataFrame(dbdrv, dsccon, dbconstr, paste("EXECUTE getnodesbyregion(", srvr_id, ",'');", sep=""))
                    } else {
                        nodes_df <- dbGetDataFrame(dbdrv, dsccon, dbconstr, paste("EXECUTE getnodesbyregion(", srvr_id, ", '", gp_nm,"');", sep=""))
                    }
                }
                for (n in 1:nrow(nodes_df)) {
                    # Query fills in blank fields so we dont need to check here
                    nd_id      = nodes_df[n,1]
                    nd_nm      = nodes_df[n,2]
                    nd_country = nodes_df[n,3]
                    nd_city    = nodes_df[n,4]
                    nd_sg      = nodes_df[n,5]
                    node  = list(node_name=nd_nm, node_id=nd_id, node_country=nd_country, node_city=nd_city, node_sg=nd_sg)
                    nodes = c(nodes, list(node))
                }
                group=list(group_name=gp_nm, node_list=nodes)
                group_list=c(group_list, list(group))
            }
            server_list=list(server=srvr_nm, groups=group_list)
            server=c(server, list(server_list))
        }
        node_json = rjson::toJSON(server)
        output = cat(node_json)
        %><%output%><%
        return(TRUE)
    }
    %>No data returned<%
    return(FALSE)
}

getDefaultPlotId <- function() {
	
	if (hh_debug) {
	    system('logger -p user.notice Hedgehog: In getDefaultPlotId')
	}
	
	# Query the db to get the default plot id
	if (!(prepStmnt("getdefaultpltid", dsccon))) {
		return(FALSE)
	}
	
	defaultpltnm <- gui_config$www$default_plot_name
	if (is.null(defaultpltnm)) {
		system('logger -p user.warning Hedgehog: Missing Default Plot name in config file. Using By region.')
		defaultpltnm <- "by_region"
	}
	defaultpltid <- dbGetDataFrame(dbdrv, dsccon, dbconstr, paste("EXECUTE getdefaultpltid('", defaultpltnm, "');", sep=""))	
	
	if (is.null(defaultpltid) || nrow(defaultpltid) == 0) {
		return(FALSE)
	}
	%><%=as.integer(defaultpltid[1])%><%
}

getDefaultGrouping <- function() {
	
	if (hh_debug) {
	    system('logger -p user.notice Hedgehog: In getDefaultGrouping')
	}
	
	grouping = gui_config$www$default_node_grouping
	if (is.null(grouping)) {
		system('logger -p user.warning Hedgehog: Missing Node Grouping in config file. Using None.')
		%>none<%
		return(TRUE)
	}

	if      (grouping == "instance") {%>instance<%} 
	else if (grouping == "city")     {%>city<%}
	else if (grouping == "country")  {%>country<%} 
	else if (grouping == "none")     {%>none<%}
	else {
		system('logger -p user.warning Hedgehog: Unsupported Node Grouping present in config file. Using None.')
		%>none<%
	}
	return(TRUE)
}

getSupportURL <- function() {
	
	if (hh_debug) {
	    system('logger -p user.notice Hedgehog: In getSupportURL')
	}

    # Calling code checks for missing url
	%><%=gui_config$www$support_url%><%

	return(TRUE)
}

generatePlot <- function(){

    #TODO(refactor): Move more of this code out to the generatePlot.R file

	if(hh_debug){
		system('logger -p user.notice Hedgehog: In generatePlot')
	}

	source(paste(hh_config$directories$web_source, "/R/generatePlot.R", sep=""))
    
	# Query the db to get the plot attributes
	if (!(prepStmnt("getpltdetails", dsccon))) {
		return(FALSE)
	}

	dd_pltid			<- GET$pltid
	pltdetails			<- dbGetDataFrame(dbdrv, dsccon, dbconstr, paste("EXECUTE getpltdetails(", dd_pltid, ");", sep=""))	
	
	if (is.null(pltdetails)) {
		return(FALSE)
	}
	
	pltnm				<- pltdetails$name
	plttitle			<- pltdetails$title
	pltdescription		<- pltdetails$description
	pltid				<- pltdetails$plot_id
		
	svrid				<- GET$svrid
	gvis				<- GET$gvis
	ndarr				<- GET$ndarr
	svrnm				<- GET$svrnm
	start				<- GET$start
	stop				<- GET$stop
	
	# Check the parameters
	if (!(prepStmnt("getsrvrid_display_name", dsccon))) {
		return(FALSE)
	}
	serverlist <- dbGetDataFrame(dbdrv, dsccon, dbconstr, "EXECUTE getsrvrid_display_name;")
	if (is.null(serverlist)) {
		return(FALSE)
	}
	check <- grep(svrnm,serverlist$display_name)
	if (length(check) == 0) {
		return(FALSE)
	}
	sid <- serverlist$id[check]
	if (sid != svrid){
		return(FALSE)
	}
		
	# Initialise plot parameters
	initPlotOptions()
	
	
	# Initialise name of plot file and make sure the cache directory exists
	plot_dir = paste(hh_config$directories$plotcache, "/", svrnm, "/", pltnm, sep="") 
	dir.create(file.path(plot_dir), showWarnings = FALSE, recursive = TRUE)
	if (pltnm %in% unknown_graphs ) {
		plot_file = "plots/no_graph.png"
	} 
	else {
		plot_file = paste(plot_dir, "/", start, "-", stop, "-all.png", sep="")
		if (gvis == 1) {
			plot_file <- sub(".png", ".html", plot_file)
		}
		if (ndarr != '-1') {
			plot_file <- sub("-all.", paste("-", digest(ndarr, algo="sha256"), ".", sep=""), plot_file)
		}
	}

	# convert the times to POSIX
	simple_start   <- sub("T", " ", start)
	simple_stop    <- sub("T", " ", stop)

	cache       <- FALSE # Create new plot_file
	if (file.exists(plot_file) && gui_config$www$use_plot_caching == 1) {
		lag_hours <- as.numeric(difftime(file.info(plot_file)$mtime,as.POSIXct(simple_start),units="hours"))
		if (lag_hours > gui_config$www$caching_delay_in_hours) {
			cache <- TRUE # Pull back file from disk
		}
	}

	if (!cache) {	
		plot_file <- generatePlotFile(plttitle, pltnm, dd_pltid, plot_file, simple_start, simple_stop, svrid, pltid, gvis, ndarr, dsccon)
	}
    
	# OK - we have a plot file so now lets generate the html to hold that
	now <- format(Sys.time(), '%Y-%m-%dT%H:%M')
	
	plot_file_raw = gsub('../','/',plot_file)
	if (plot_file != "plots/no_graph.png" && plot_file != "plots/no_results.png" && plot_file != "plots/no_connection.png") {
		plot_file <- sub(hh_config$directories$plotcache, "../plotcache", plot_file)
        
		if (gvis == '1') {
			%><div id="plot">
				<hr />
				<iframe scrolling="no" width="100%" height="600px" frameborder="0" id="plotframe" src="<%=plot_file%>?nocache=<%=now%>"></iframe>
			</div><%
		}
		else if (pltnm %in% log_option) {
			log_file <- sub(".png", "-log.png", plot_file)
			stack_file <- sub(".png", "-stack.png", plot_file)
			%><div id="opts" class="" style="height=10px">
				<hr style="margin-bottom:10px;"/>
				<input type="radio" name="pltoptions" id="rbliny" onclick="toggle_plot()" title="Line plot with linear y-axis" checked>
				<label for="rbliny" title="Line plot with linear y-axis">Linear scale</label>
				<input type="radio" name="pltoptions" id="rblogy" onclick="toggle_plot()" title="Line plot with log y-axis">
				<label for="rblogy" title="Line plot with log y-axis">Log scale</label>
				<input type="radio" name="pltoptions" id="rbstack" onclick="toggle_plot()" title="Stacked line plot with linear y-axis">
				<label for="rbstack"  title="Stacked line plot with linear y-axis">Stacked linear</label>
			</div>
			<div id="plot">
				<img src="<%=plot_file%>?nocache=<%=now%>" id= "liny" name="http://<%=SERVER$hostname%><%=gsub("\\.\\./",'/',plot_file)%>"/>
				<img src="<%=log_file%>?nocache=<%=now%>" class="hidden" id="logy" name="http://<%=SERVER$hostname%><%=gsub("\\.\\./",'/',log_file)%>" />
				<img src="<%=stack_file%>?nocache=<%=now%>" class="hidden" id="stack" name="http://<%=SERVER$hostname%><%=gsub("\\.\\./",'/',stack_file)%>"/>
			</div><%
		}
		else {
			%><div id="plot">
				<hr />
				<img id="staticplot" src="<%=plot_file%>?nocache=<%=now%>" />
			</div><%
		}
		%><div id="plink" class="" style="height:27px; width:960px;">
			<label style="font-size:80%" for="ploturi">Static Link</label>
			<input type="text" id="ploturi" readonly="readonly" value="http://<%=SERVER$hostname%><%=gsub("\\.\\./",'/',plot_file)%>" style="width: 870px; height:7px; font-size:80%">
		</div><%
	}
	else {
		%><div id="plot">
			<hr />
			<img src="<%=plot_file%>" />
		</div><%
	}
}

validateDbVersion <- function() {
	
	if (hh_debug) {
		system('logger -p user.notice Hedgehog: In validateDbVersion')
	}

	if (!(prepStmnt("getdbversion", dsccon))) {
		%>Error: preparing db query<%
		return(FALSE)
	}
		
	dbversion <- dbGetDataFrame(dbdrv, dsccon, dbconstr, "EXECUTE getdbversion;")
    
	if (is.null(dbversion)) {
		%>Error: DB connection error<%
		return(FALSE)
	}
	
	if (dbversion != DB_SCHEMA_VERSION) {
		%>Error: Database version mismatch. Contact an administrator.<%
		return(FALSE)
	}	

	return(TRUE)
}

#########################################################
###########  Entry point for brew calls #################
#########################################################

if (hh_debug) {
    system('logger -p user.notice Hedgehog: Call to Hedgehog brew')
}

source(paste(hh_config$directories$web_source, "/R/utilities.R", sep = ""))
if (!validateGetParams()) {
	%>Error: invalid parameters in method call.<%
	return()
}

if (GET$type == "initPltType") {
	# this doesn't need to call the DB
	initPltType()
	return()
}

if (is.null(hh_config$database$read_pass)) { 
    db_password <- ""
} else {
    db_password <- hh_config$database$read_pass
}
dsccon <- try(dbConnect(dbdrv, dbname = hh_config$database$name, user = hh_config$database$read_user, port = hh_config$database$port, host = hh_config$database$host, password = db_password))
dbconstr <<-paste('dbname = \'', hh_config$database$name, '\', user = \'', hh_config$database$read_user, '\', port = ', hh_config$database$port, ', host = \'', hh_config$database$host, '\', password = \'', hh_config$database$read_pass,'\'', sep="")
if (hh_debug) {
  msg <- paste('logger -p user.notice dsccon: ', dbconstr)
  system(msg)
}

if (class(dsccon) != "try-error") {
	dbSendQuery(dsccon, "set statement_timeout to 300000;")
	source(paste(hh_config$directories$web_source, "/R/prepareStatement.R", sep = ""))
	source(paste(hh_config$directories$web_source, "/R/generatePlot.R", sep = ""))
	switch(GET$type,
		validateDBVersion  = {validateDbVersion()},
		initPlotDDHtml     = {initPlotDDHtml()},
		initServerDDHtml   = {initServerDDHtml()},
		getDefaultServer   = {getDefaultServer()},
		initNodeTabsHtml   = {initNodeTabsHtml()},
		initNodeData       = {initNodeData()},
		getDefaultPlotId   = {getDefaultPlotId()},
		getDefaultGrouping = {getDefaultGrouping()},
		getSupportURL      = {getSupportURL()},
		generatePlot       = {generatePlot()},
		generateYaml       = {generateYaml(dsccon)}
	)
	dbDisconnect(dsccon)
} else {
	%>Error: Could not connect to the database - please check the connection parameters: name, read-user, port<%
	return(FALSE)
}
%>
