#!/usr/bin/env python

# 
# Copyright 2015, 2016 Internet Corporation for Assigned Names and Numbers.
# 
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, you can obtain one at https://mozilla.org/MPL/2.0/.

# Developed by Sinodun IT (www.sinodun.com)

# Original developed by john.bond@icann.org
# Modified for use with Hedgehog by Sinodun IT (www.sinodun.com)

import sys
import time
import rssac
import socket
import argparse
import datetime
import logging
import StringIO
import SocketServer
import dns.name
import dns.tsig
import dns.query
import dns.message
import dns.tsigkeyring
import psycopg2
import os, pwd, grp
import yaml

class DnsReaderServer(SocketServer.UDPServer):
    '''
    SocketServer.ThreadingUDPServer 

    Instance variables:
    
    - RequestHandlerClass
    '''

    keyname   = None
    keyring   = None
    keyalgorithm = None
    
    def __init__(self, server_address, RequestHandlerClass, server_name, zone_name, key=None, keyname=None, keyalgo=None):
        SocketServer.UDPServer.__init__(
                self, server_address, RequestHandlerClass)
        
        config_doc = file('@HEDGEHOGYAML@/hedgehog.yaml', 'r')
        config = yaml.load(config_doc)
        config_doc.close()
        db_host = config['database']['host']
        db_port = config['database']['port']
        db_name = config['database']['name']
        db_owner =  config['database']['owner']
        db_password = config['database']['owner_pass']
                
        ''' We are bound to any restricted ports by this stage '''
        ''' Now do everything as a non-root user '''
        ''' Get the uid/gid from the db_owner name '''
        ''' This assumes that db_owner == username to execute as '''
        running_uid = pwd.getpwnam(db_owner).pw_uid
        running_gid = grp.getgrnam(db_owner).gr_gid
        ''' Clear group privileges '''
        os.setgroups([])
        ''' set new uid/gid '''
        os.setgid(running_gid)
        os.setuid(running_uid)
        
        ''' Start logger '''
        self.logger = logging.getLogger('rssac_propagation.server.DnsReaderServer')
        self.zone_name = zone_name
        
        if key and keyname:
            self.keyname          = keyname
            self.keyring          = dns.tsigkeyring.from_text({ keyname : key})
        if keyalgo:
            self.keyalgorithm     = dns.name.from_text(keyalgo)
            
        ''' Set up database connection '''
        self.conn = psycopg2.connect(database=db_name, user=db_owner, password=db_password,
                                host=db_host, port=db_port)
        cur = self.conn.cursor()
        sql = "select version from dsc.version"
        self.logger.debug('SQL Query: {}'.format(sql))
        cur.execute(sql)
        api_tuple = cur.fetchone()
        if api_tuple == None:
            cur.close()
            self.logger.error('SQL Result: Databae API version not defined in the database')
            raise ValueError('Databae API version not defined in the database')
        if api_tuple[0] != @DB_VERSION@:
            cur.close()
            self.logger.error('SQL Result: Incorrect database API is {} should be {}'.format(api_tuple[0], @DB_VERSION@))
            raise ValueError('Incorrect database API')
        self.logger.debug('SQL Result: Database API is {}'.format(api_tuple[0]))
        
        ''' Get plot id '''
        self.load_time_plot_id = self._get_plot_id('load_time')
        self.zone_size_plot_id = self._get_plot_id('zone_size')

        ''' Get server id '''
        sql = "SELECT id from server where display_name=%s;"
        data = (server_name, )
        fsql = cur.mogrify(sql, data)
        self.logger.debug('SQL Query: {}'.format(fsql))
        cur.execute(sql, data)
        server_id_tuple = cur.fetchone()
        if server_id_tuple == None:
            cur.close()
            raise ValueError('Server is not defined in the database')
        self.logger.debug('SQL Result: Server {} has id {}'.format(server_name, server_id_tuple[0]))
        self.db_server_id = server_id_tuple[0]
        
        ''' Get the list of nodes to query '''
        self.nodes = {}
        sql="SELECT id, ip FROM node WHERE server_id=%s and ip is not null"
        data = (self.db_server_id, )
        fsql = cur.mogrify(sql, data)
        self.logger.debug('SQL: {}'.format(fsql))
        cur.execute(sql, data)
        for node in cur:
            self.nodes[node[0]] = node[1]
        if not self.nodes:
            cur.close()
            raise ValueError('No nodes found for server id {} with an IP address'.format(self.db_server_id))
        self.logger.debug('SQL Result: Server id {} has IP Adresses for node(s) id {}'.format(self.db_server_id, self.nodes))
    
        ''' Get max serial number '''
        ''' This is read at startup and state is maintained while the server is running '''
        sql = "SELECT max(data.key2) FROM data WHERE plot_id=%s AND server_id=%s"
        data = (self.load_time_plot_id, self.db_server_id)
        fsql = cur.mogrify(sql, data)
        self.logger.debug('SQL: {}'.format(fsql))
        cur.execute(sql, data)
        max_serial_tuple = cur.fetchone()
        if max_serial_tuple[0] == None:
            self.max_serial=0
        else:
            self.max_serial=max_serial_tuple[0]
    
        cur.close()
        
    def _get_plot_id(self, plot_name):
        cur = self.conn.cursor()
        sql = "SELECT id from dataset where name=%s;"
        data = (plot_name, )
        fsql = cur.mogrify(sql, data)
        self.logger.debug('SQL Query: {}'.format(fsql))
        cur.execute(sql, data)
        plot_id_tuple = cur.fetchone()
        if plot_id_tuple == None:
            cur.close()
            raise ValueError('Plot is not defined in the database')
        self.logger.debug('SQL Result: Plot {} has id {}'.format(plot_name, plot_id_tuple[0]))
        cur.close()
        return plot_id_tuple[0]
        
    
        
class DnsReaderHandler(SocketServer.BaseRequestHandler):
    '''
    Base Handler class 
    '''

    message  = None
    serial   = None
    data     = None
    socket   = None
    qname    = None

    def __init__(self, request, client_address, server):
        SocketServer.BaseRequestHandler.__init__(self, request, client_address, server)

    def _process_load_time(self):
        start = time.time()
        self.server.logger.debug('SQL Result: Server id {} has max serial {}'.format(self.server.db_server_id, self.server.max_serial))
        zone_check = rssac.CheckZone(self.qname, self.server.nodes,
                self.serial, start)
        zone_check.check_propagation()
        cur = self.server.conn.cursor()
        for node, end in zone_check.nodes_report.items():
            if type(end) is str:
                ''' Timeout '''
                load_time = None
                continue
            
            load_time = end - start
            sql = "INSERT INTO data (starttime, server_id, node_id, plot_id, key1, key2, value) VALUES (%s,%s,%s,%s,%s,%s,%s)"
            data = (datetime.datetime.fromtimestamp(start), self.server.db_server_id, node, self.server.load_time_plot_id, self.qname, self.serial, load_time)
            fsql = cur.mogrify(sql, data)
            self.server.logger.debug('SQL: {}'.format(fsql))
            cur.execute(sql, data)
        
        '''' record this serial as the new max(serial) '''
        self.server.max_serial = self.serial
        self.server.conn.commit()
        cur.close()
        
    def _get_zone_size(self):
        self.server.logger.debug('Starting get_zone_size')
        zone      = StringIO.StringIO()
        zone_size = 0
        self.server.logger.debug('xfr query address {} qname {} keyname {}'.format(self.client_address[0], self.qname, self.server.keyname))
        xfr       = dns.query.xfr(self.client_address[0], self.qname, keyname=self.server.keyname,
                    keyring=self.server.keyring, keyalgorithm=self.server.keyalgorithm)
        try:
            for message in xfr:
                for ans in message.answer:
                    ans.to_wire(zone, origin=dns.name.root)
        except dns.exception.FormError:
            self.server.logger.error('Error attempting AXFR from {}'.format(self.client_address[0]))
        else:
            ''' Need to subtract 2 bytes for the TCP length field '''
            zone_size = sys.getsizeof(zone.getvalue()) - 2
        zone.close()
        self.server.logger.debug('Done get_zone_size')
        return zone_size

    def _process_zone_size(self):
        self.server.logger.debug('Starting process_zone_size')
        start = time.time()
        zone_size = self._get_zone_size()
        self.server.logger.debug('zone_size {}'.format(zone_size))
        if zone_size == 0:
            ''' Return because we didn't get an answer '''
            self.server.logger.warn('Warning: No zone size returned from {}'.format(self.client_address[0]))
            return
        cur = self.server.conn.cursor()
        for node in self.server.nodes.keys():
            sql = "INSERT INTO data (starttime, server_id, node_id, plot_id, key1, key2, value) VALUES (%s,%s,%s,%s,%s,%s,%s)"
            data = (datetime.datetime.fromtimestamp(start), self.server.db_server_id, node, self.server.zone_size_plot_id, self.qname, self.serial, zone_size)
            fsql = cur.mogrify(sql, data)
            self.server.logger.debug('SQL: {}'.format(fsql))
            cur.execute(sql, data)
            self.server.conn.commit()
        cur.close()    
        self.server.logger.debug('Done process_zone_size')
        
    def send_response(self):
        ''' Send notify response '''
        response = dns.message.make_response(self.message)
        self.socket.sendto(response.to_wire(), self.client_address)
        
    def parse_dns(self):
        '''
        parse the data package into dns elements
        '''
        self.data = str(self.request[0]).strip()
        self.socket = self.request[1]
        #incoming Data
        try:
            self.message = dns.message.from_wire(self.data)
        except dns.name.BadLabelType:
            #Error processing label (bit flip?)
            self.server.logger.error('Received Bad label Type from {}'.format(self.client_address[0]))
        except dns.message.ShortHeader:
            #Received junk
            self.server.logger.error('Received Junk from {}'.format(self.client_address[0]))
        else:
            current_time = int(time.time())
            if self.message.opcode() == 4:
                self.qname = self.message.question[0].name.to_text()
                if self.qname == self.server.zone_name:
                    self.server.logger.debug('Received notify for zone {}'.format(self.qname))
                    if len(self.message.answer) > 0:
                        answer = self.message.answer[0]
                        self.serial = answer.to_rdataset()[0].serial
                    
                        if int(self.serial) <= int(self.server.max_serial):
                            self.server.logger.debug('{}:{}:load-time already processed or lower then max({})'.format(
                                self.qname, self.serial, self.server.max_serial))
                            self.send_response()
                            return False
                        else:    
                            self.server.logger.debug('Received notify for {} from {}'.format(self.serial, self.client_address[0]))
                            self.send_response()
                            return True
                    else:
                        self.server.logger.error('Received notify with no serial from {}'.format(self.client_address[0]))
                        self.send_response()
                else:
                    self.server.logger.debug('Received notify for zone {} expected zone {}, ignoring'.format(self.server.zone_name, self.qname))
        return False

    def handle(self):
        '''
        RequestHandlerClass handle function
        handler listens for dns packets
        '''
        if self.parse_dns():
            self._process_load_time()
            self._process_zone_size()
    
def main():
    ''' parse cmd line args '''
    parser = argparse.ArgumentParser(description='nofify receiver')
    parser.add_argument('-n','--tsig-name')
    parser.add_argument('-k','--tsig-key')
    parser.add_argument('-a','--tsig-algo', 
            choices=['hmac-sha1', 'hmac-sha224', 'hmac-sha256', 'hmac-sha384','hmac-sha512'])
    parser.add_argument('-v', '--verbose', action='count', help='increase verbosity (up to -vvv)')
    parser.add_argument('-o','--log', default='server.log')
    parser.add_argument('-l', '--listen', metavar="0.0.0.0:53", 
            default="0.0.0.0:53", help='listen on address:port ')
    parser.add_argument('-s','--server', help='server name', required=True)
    parser.add_argument('-z','--zone',help='zone name', required=True)
    args = parser.parse_args()
    host, port = args.listen.split(":")
    
    ''' configure logging '''
    log_level = logging.ERROR
    log_format ='%(asctime)s:%(levelname)s:%(name)s:%(funcName)s(%(levelno)s):%(message)s'
    if args.verbose == 1:
        log_level = logging.WARN
    elif args.verbose == 2:
        log_level = logging.INFO
    elif args.verbose > 2:
        log_level = logging.DEBUG
    logging.basicConfig(level=log_level, filename=args.log, format=log_format)
    logger = logging.getLogger('rssac_propagation.server')
    logger.info('rssacd starting up...')
    
    ''' Init and then run the server '''
    server = DnsReaderServer((host, int(port)), DnsReaderHandler, args.server, args.zone,
            args.tsig_key, args.tsig_name, args.tsig_algo) 
    server.serve_forever()
    
if __name__ == "__main__":
    main()