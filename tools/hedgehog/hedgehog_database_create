#!/bin/bash
# 
# Copyright 2015, 2016 Internet Corporation for Assigned Names and Numbers.
# 
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, you can obtain one at https://mozilla.org/MPL/2.0/.

#
# Developed by Sinodun IT (www.sinodun.com)
#

# 
# File:   database_create
#

DB_NAME=hedgehog
DB_OWNER=hedgehog
DB_READER=www-data

usage () {
	echo
	echo "Create database and roles/users."
	echo
	echo "Usage: $(basename $0) options"
	echo
	echo "Supported options:"
	echo "  -o Owner of the database  (Default: $DB_OWNER)"
	echo "  -r Reader of the database (Default: $DB_READER) Typically the same user that the web server runs as."
	echo "  -n Name of the database   (Default: $DB_NAME)"
	echo "  -h Show this help"
	echo
	echo "In the 'database' section of hedgehog.yaml you should set the same values"
  
  exit 1
}

while getopts ":o:r:n:h" opt; do
    case $opt in
        o  ) DB_OWNER=$OPTARG ;;
        r  ) DB_READER=$OPTARG ;;
        n  ) DB_NAME=$OPTARG ;;
        h  ) usage ;;
        \? ) usage ;;
    esac
done

DB_EXISTS=$(psql -tlq | cut -d \| -f 1 | grep -w $DB_NAME)
[ "x$DB_EXISTS" != "x" ] && echo "The $DB_NAME Database exists. If you want to overwrite it then drop it manually and re-run this script" && exit 1

psql <<EOF
CREATE USER "$DB_OWNER";
CREATE ROLE hh_read;
CREATE ROLE hh_write;
CREATE DATABASE "$DB_NAME"
  WITH OWNER = "$DB_OWNER"
  ENCODING = 'UTF8'
  TABLESPACE = pg_default
  CONNECTION LIMIT = -1;
CREATE USER "$DB_READER";
GRANT hh_read TO "$DB_READER";
ALTER USER "$DB_READER" SET search_path TO dsc;
ALTER USER "$DB_OWNER" SET search_path TO dsc;
\connect "$DB_NAME"
CREATE LANGUAGE plpythonu;
CREATE SCHEMA dsc AUTHORIZATION "$DB_OWNER";
CREATE EXTENSION ip4r SCHEMA dsc;


CREATE or REPLACE FUNCTION dsc.ip2asn (addr dsc.ipaddress)
  RETURNS text
as \$\$

  rdata = plpy.execute("select dsc.teamcymrulookup('" + addr + "')")
  if rdata != None:
    result = rdata[0]['teamcymrulookup']
    if result != None:
      return result.split('|')[0].strip()
          
  plpy.info('Function ip2asn: No ASN found')
  return None
\$\$ LANGUAGE plpythonu;

CREATE or REPLACE FUNCTION dsc.ip2bgpprefix (addr dsc.ipaddress)
  RETURNS int
as \$\$

  rdata = plpy.execute("select dsc.teamcymrulookup('" + addr + "')")
  if rdata != None:
    result = rdata[0]['teamcymrulookup']
    if result != None:
      bgpprefix = result.split('|')[1].strip()
      return int(bgpprefix.split('/')[1])
          
  plpy.info('Function ip2bgpprefix: No BGP Prefix found')
  return None
\$\$ LANGUAGE plpythonu;

CREATE or REPLACE FUNCTION dsc.teamcymrulookup (addr dsc.ipaddress)
  RETURNS text
as \$\$
  from IPy import IP
  import getdns
  
  ''' Sanity Check '''
  if addr is None:
    plpy.error('Function teamcymrulookup: Address passed in was null')
    return None
    
  ''' Create a IPy IP object '''
  ip = IP(addr)

  ''' reverse the address '''
  if ip.version() == 4:
    s = ip.strFullsize()
    s = s.split('.')
    s.reverse()
    s = '.'.join(s)
    qname = "%s.origin.asn.cymru.com." % s
  elif ip.version() == 6:
    s = '%032x' % ip.int()
    s = list(s)
    s.reverse()
    s = '.'.join(s)
    qname = "%s.origin6.asn.cymru.com." % s 
  else:
    plpy.error('Function teamcymrulookup: Unknown IP address type.')
    return None
    
  ''' Store/retrieve the context in/from the global dict. '''
  if 'teamcymrulookupctx' in GD.keys():
      ctx = GD['teamcymrulookupctx']
  else:
      ctx = getdns.Context()
      ctx.resolution_type = getdns.RESOLUTION_STUB
      GD['teamcymrulookupctx'] = ctx
  
  try:
    results = ctx.general(name=qname, request_type=getdns.RRTYPE_TXT, extensions={})
  except getdns.error as e:
    plpy.error('Function teamcymrulookup: GetDNS Error: %s' % str(e))
    return None
  status = results.status
  if status == getdns.RESPSTATUS_GOOD:
    for reply in results.replies_tree:
      answers = reply['answer']
      for answer in answers:
        if answer['type'] == getdns.RRTYPE_TXT:
          rdata = answer['rdata']
          return rdata['txt_strings'][0]
          
  plpy.info('Function teamcymrulookup: No data returned from DNS query')
  return None
\$\$ LANGUAGE plpythonu;

CREATE or REPLACE FUNCTION dsc.iptruncate (addr dsc.ipaddress)
  RETURNS dsc.iprange
as \$\$
BEGIN
  CASE family(addr)
    WHEN 4 then RETURN addr / 8;
    WHEN 6 then RETURN addr / 32;
  END CASE;
END
\$\$ LANGUAGE plpgsql;

CREATE or REPLACE FUNCTION dsc.alabel2ulabel (alabel text)
  RETURNS text
as \$\$
  
  import getdns
  
  ''' Sanity Check '''
  if alabel is None:
    plpy.error('Function alabel2ulabel: a-label passed in was null')
    return None
  
  ulabel = getdns.alabel_to_ulabel(alabel)
  return ulabel
\$\$ LANGUAGE plpythonu;
EOF

echo
echo "Please add $DB_OWNER and $DB_READER to pg_hba.conf, set passwords etc."
