#!/bin/bash
# 
# Copyright 2014 Internet Corporation for Assigned Names and Numbers.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Developed by Sinodun IT (www.sinodun.com)
#

# 
# File:   database_update_nodes
#

#TODO(asap): Add option to generate the nodes.csv file from the directory structure if it already exists (won't have group info)
#TODO(asap): Add option to delete servers/nodes/groups
#TODO: Add reporting if nodes found in the database that are not in the nodes.csv file

eval $(@LIBEXEC@/conf_read)

REQUIRED_API_VERSION=@DB_VERSION@
DB_NAME=$hhconfig_database_name
DATA_DIR=$hhconfig_directories_data
NODES_FILE=$hhconfig_directories_conf/"nodes.csv"
PREDICT=0;
SQ="'"
NEW_SERVER=0
SUPPRESS_WARNINGS=0
export PGPASSWORD=$hhconfig_database_owner_pass

usage () {
	echo
	echo "Add/update the servers and nodes in the database. This reads input from file"
	echo "called nodes.csv in the $hhconfig_directories_conf directory."
	echo " - An example nodes.csv file is installed if one does not exist."
	echo " - See the comments in that file for details of the format."
	echo " - No action is taken on servers/nodes that are in the database but are not in the input files."
	echo 
    echo "Usage: $(basename $0) options"
    echo
    echo "Supported options:"
	echo "  -p Run in prediction mode. Output findings but don't act on the DB"
    echo "  -h Show this help."
}

while getopts ":psh" opt; do
    case $opt in
		p  ) PREDICT=1;;
		s  ) SUPPRESS_WARNINGS=1;;
        h  ) usage
             exit 1 ;;
        \? ) usage
             exit 1 ;;
    esac
done

echo "`date`: $0 COMMENCED"
USER=$(whoami)
[ $USER != $hhconfig_database_owner ] && echo "Must be $hhconfig_database_owner to run this script" && exit 1

DB_API_VERSION=`psql -h $hhconfig_database_host $DB_NAME -tc  "select version from dsc.version;"`
[ $DB_API_VERSION -ne $REQUIRED_API_VERSION ] && echo "Error: Database API version incorrect." && exit 1


if [ ! -f $NODES_FILE ] ; then
	echo "No nodes.csv file found. Expecting a file $NODES_FILE... done..."
	exit 1
fi
echo "Processing file: " $NODES_FILE
if [ ${PREDICT} -eq 1 ] ; then
	echo "***** PREDICTION MODE *****"
fi

# Process the nodes file
while read line || [[ -n "$line" ]]; do

	trimmed_line=`echo $line | sed -e 's/^ *//' -e 's/ *$//'`

	if [[ -z ${trimmed_line} ]] || [[ "${trimmed_line}" =~ ^# ]] ; then
		continue
	fi	
	
	OIFS=$IFS
	IFS=','
	read -ra arrline <<< "$trimmed_line"
	IFS=$OIFS
	SERVER_NAME=`echo ${arrline[0]} | sed -e 's/^ *//' -e 's/ *$//'`
	NODE_NAME=`echo ${arrline[1]} | sed -e 's/^ *//' -e 's/ *$//'`
	GROUP=`echo ${arrline[2]} | sed -e 's/^ *//' -e 's/ *$//'`
	SUBGROUP=`echo ${arrline[3]} | sed -e 's/^ *//' -e 's/ *$//'`
	
	# First, validate the input	
	if [ -z "$SERVER_NAME" ] ; then
		echo "Missing server name. This entry will be ignored."
		continue
	fi	
	
	if ! [[ "${SERVER_NAME}" =~ ^[a-zA-Z0-9\-]+$ ]] ; then
		echo "Server name '${SERVER_NAME}' is invalid. It may contain alphanumeric characters and hyphens (-) only. This entry will be ignored."
		continue
	fi	
	
	if [ -z "$NODE_NAME" ] ; then
		echo "Missing node name field for node on server $SERVER_NAME - node ignored"
		continue
	fi
	
	if ! [[ "${NODE_NAME}" =~ ^[a-zA-Z0-9\-]+$ ]] ; then
		echo "Node name '${NODE_NAME}' is invalid. It may contain alphanumeric characters and hyphens (-) only. This entry will be ignored."
		continue
	fi

	[ -z $GROUP ] && GROUP="Other"

	if ! [[ "${GROUP}" =~ ^[a-zA-Z0-9\-]+$ ]] ; then
		echo "Group name '${GROUP}' is invalid. It may contain alphanumeric characters and hyphens (-) only. This entry will be ignored."
		continue
	fi
	
	if [ -z $SUBGROUP ] ; then 
		SUBGROUP=""
	elif ! [[ "${SUBGROUP}" =~ ^[a-zA-Z0-9\-]+$ ]] ; then
		echo "Sub group name '${SUBGROUP}' is invalid. It may contain alphanumeric characters and hyphens (-) only. This entry will be ignored."
		continue
	fi

	# Now add the data
	SERVER_ID=`psql -h $hhconfig_database_host $DB_NAME -tc "select id from server where display_name=$SQ$SERVER_NAME$SQ"`

	if [ -z "$SERVER_ID" ] ; then
		echo "INFO: New server found - inserting: '$SERVER_NAME' "
		if [ ${PREDICT} -eq 0 ] ; then
			SERVER_DB_NAME=`echo $SERVER_NAME | awk '{print tolower($0)}' | sed -e 's/-/_/g' `
			psql -h $hhconfig_database_host -d $DB_NAME -c "INSERT INTO dsc.server (name, display_name) VALUES ('$SERVER_DB_NAME', '$SERVER_NAME');"
			SERVER_ID=`psql -h $hhconfig_database_host $DB_NAME -tc "select id from server where display_name=$SQ$SERVER_NAME$SQ"`
			mkdir -p ${DATA_DIR}/${SERVER_NAME}
			let NEW_SERVER=1
		fi
	fi

	NODE_ID=`psql -h $hhconfig_database_host $DB_NAME -tc "select id from dsc.node where server_id=$SERVER_ID and name=$SQ$NODE_NAME$SQ"`
	
	if [ -z "${NODE_ID}" ] ; then 
		echo "INFO: New node found - inserting node with name name: '$NODE_NAME' on server: '$SERVER_NAME' with group: '$GROUP'"
		if [ ${PREDICT} -eq 0 ] ; then
			psql -h $hhconfig_database_host -d $DB_NAME -c "INSERT INTO dsc.node (server_id, name, region, subgroup) VALUES ($SERVER_ID, '$NODE_NAME', '$GROUP', '$SUBGROUP');"
			mkdir -p $DATA_DIR/$SERVER_NAME/$NODE_NAME/incoming
		fi		
	else
		DB_GROUP=`echo "SELECT region FROM dsc.node where server_id=$SERVER_ID and id=$NODE_ID;" | psql -h $hhconfig_database_host -td $DB_NAME  | sed -e 's/^ *//' -e 's/ *$//'`
		if [ "${GROUP}" != "${DB_GROUP}" ] ; then
			# group for existing node has been updated
        	echo "INFO: Updating existing node with name: '$NODE_NAME' on server: '$SERVER_NAME'. Changing group from '$DB_GROUP' to '$GROUP'"
			if [ ${PREDICT} -eq 0 ] ; then
				psql -h $hhconfig_database_host -d $DB_NAME -c "UPDATE dsc.node SET region = '$GROUP' WHERE id=$NODE_ID;"	
			fi
		fi
		DB_SUBGROUP=`echo "SELECT subgroup FROM dsc.node where server_id=$SERVER_ID and id=$NODE_ID;" | psql -h $hhconfig_database_host -td $DB_NAME  | sed -e 's/^ *//' -e 's/ *$//'`
		if [ "${SUBGROUP}" != "${DB_SUBGROUP}" ] ; then
			# group for existing node has been updated
        	echo "INFO: Updating existing node with name: '$NODE_NAME' on server: '$SERVER_NAME'. Changing subgroup from '$DB_SUBGROUP' to '$SUBGROUP'"
			if [ ${PREDICT} -eq 0 ] ; then
				psql -h $hhconfig_database_host -d $DB_NAME -c "UPDATE dsc.node SET subgroup = '$SUBGROUP' WHERE id=$NODE_ID;"	
			fi
		fi
	fi
done < ${NODES_FILE}

if [ ${NEW_SERVER} -eq 1 ] && [ $SUPPRESS_WARNINGS -eq 0 ] ; then
	echo
	echo "********************************************************************************"
	echo "New servers have been added to Hedgehog! To enable the import of data for this"
	echo "server the 'manage_partitions' script MUST be run manually now."
	echo "********************************************************************************"
	echo
fi

echo "`date`: $0 COMPLETED"
