#!/bin/bash
# 
# Copyright 2014, 2015, 2016 Internet Corporation for Assigned Names and Numbers.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Developed by Sinodun IT (www.sinodun.com)
#

# 
# File:   database_update_nodes
#

eval $(@LIBEXEC@/conf_read)
NODES_FILE="${hhconfig_directories_conf}/nodes.csv"
DATA_DIR=$hhconfig_directories_data
if [ ! -e $NODES_FILE ] ; then
	echo "Error attempting to find nodes.csv. Tried: $NODES_FILE"
	exit 1
fi

# We need a write user with access to the data dir. 
a=$(@LIBEXEC@/check_user_perms -wfc)
if [ $? -ne 0 ] ; then
	echo $a
	exit 1
fi
eval $a
export PGPASSWORD=$PGPASSWORD

usage () {
        echo
        echo "Add/update the servers and nodes in the database. This reads input from file"
        echo "called nodes.csv in the $hhconfig_directories_conf directory."
        echo " - An example nodes.csv file is installed if one does not exist."
        echo " - See the comments in that file for details of the format."
        echo " - No action is taken on servers/nodes that are in the database but are not in the input files."
        echo 
    echo "Usage: $(basename $0) options"
    echo
    echo "Supported options:"
	echo "  -d debug mode (set -x)."
    echo "  -h Show this help."
}

while getopts ":hd" opt; do
    case $opt in
        h  ) usage
             exit 1 ;;
        d  ) set -x ;;
        \? ) usage
             exit 1 ;;
    esac
done

echo "$(date): $0 COMMENCED"

# Read CSV file with the following fields in order:
fields=(server_name node_name node_region node_country node_city node_subgroup node_ip)

SERVER_NAME_MAX_LENGTH=11
NAME_REGEX="^[a-zA-Z0-9\\.-]+$"
NAME_SPACE_REGEX="^[[:space:]a-zA-Z0-9\\-]+$"
NAME_ERROR="It may contain alphanumeric characters, hyphens (-) and full stops (.) only."
NAME_SPACE_ERROR="It may contain alphanumeric characters, spaces and hyphens (-) only."
IP_REGEXP="^[a-fA-F0-9:\\.]*$"
IP_ERROR="It must be a valid IPv4 or IPv6 address."

declare -A aNODES
declare -A aFIELD_OPTIONAL
declare -A aFIELD_REGEX
declare -A aFIELD_ERROR

aFIELD_OPTIONAL["server_name"]="no"
aFIELD_OPTIONAL["node_name"]="no"
aFIELD_OPTIONAL["node_region"]="yes"
aFIELD_OPTIONAL["node_country"]="yes"
aFIELD_OPTIONAL["node_city"]="yes"
aFIELD_OPTIONAL["node_subgroup"]="yes"
aFIELD_OPTIONAL["node_ip"]="yes"

aFIELD_REGEX["server_name"]=$NAME_REGEX
aFIELD_REGEX["node_name"]=$NAME_REGEX
aFIELD_REGEX["node_region"]=$NAME_REGEX
aFIELD_REGEX["node_country"]=$NAME_SPACE_REGEX
aFIELD_REGEX["node_city"]=$NAME_SPACE_REGEX
aFIELD_REGEX["node_subgroup"]=$NAME_REGEX
aFIELD_REGEX["node_ip"]=$IP_REGEXP

aFIELD_ERROR["server_name"]=$NAME_ERROR
aFIELD_ERROR["node_name"]=$NAME_ERROR
aFIELD_ERROR["node_region"]=$NAME_ERROR
aFIELD_ERROR["node_country"]=$NAME_SPACE_ERROR
aFIELD_ERROR["node_city"]=$NAME_SPACE_ERROR
aFIELD_ERROR["node_subgroup"]=$NAME_ERROR
aFIELD_ERROR["node_ip"]=$IP_ERROR

i=1
NEW_SERVER=0
# Read nodes.csv
while read line || [[ -n "$line" ]]; do
	
	trimmed_line=$(echo $line | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

	if [[ -z ${trimmed_line} ]] || [[ "${trimmed_line}" =~ ^# ]] ; then
		continue
	fi	 

	IFS=, read -r aNODES["server_name"] aNODES["node_name"] \
	                aNODES["node_region"] aNODES["node_country"] \
	                aNODES["node_city"] aNODES["node_subgroup"] \
					aNODES["node_ip"] junk <<< "$trimmed_line"
	
	if [[ -n $junk ]] ; then
		echo "Error: Too many fields in $NODES_FILE line $i"
		exit 1
	fi

	if [ ${#aNODES["server_name"]} -gt $SERVER_NAME_MAX_LENGTH ] ; then
		echo "Error: Server name ${aNODES["server_name"]} too long in $NODES_FILE line $i"
		exit 1
	fi

	error="no"
	# Turn off filename expansion in case someone has put something stupid 
	# in the nodes file
	set -f
	for key in ${fields[*]} ; do
		aNODES["$key"]=$(echo ${aNODES["$key"]} | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
		if [[ ${aNODES["$key"]} =~ ^[[:space:]]*$ ]] ; then
			# Empty IP address MUST be null not an empty string
			if [ "$key" == "node_ip" ] ; then
				aNODES["$key"]="null"
			fi
			if [ "${aFIELD_OPTIONAL["$key"]}" == "no" ] ; then
				echo "Line $i, Field $key is not optional."
				error="yes"
				break
			else
				continue
			fi
		fi
		if [[ ! ${aNODES["$key"]} =~ ${aFIELD_REGEX["$key"]} ]] ; then
			echo "Line $i, Field $key value: \"${aNODES["$key"]}\" is not valid. ${aFIELD_ERROR["$key"]} This line will be ignored."
			error="yes"
			break
		fi
	done
	if [ "$error" == "yes" ] ; then
		continue
	fi
	set +f
	
	i=$(($i+1))
		
	echo "Processing: ${aNODES["server_name"]} ${aNODES["node_name"]} ${aNODES["node_region"]} ${aNODES["node_country"]} ${aNODES["node_city"]} ${aNODES["node_subgroup"]} ${aNODES["node_ip"]}"
	
	SERVER_ID=$(psql $CONN_STRING -tc "select id from server where display_name='${aNODES["server_name"]}'")
	if [ -z "$SERVER_ID" ]; then
		# lower case
		SERVER_DB_NAME=${aNODES["server_name"]}
		SERVER_DB_NAME=${SERVER_DB_NAME,,}
		# subsitute _ for -
		SERVER_DB_NAME=${SERVER_DB_NAME//-/_}
		# subsitute __ for .
		SERVER_DB_NAME=${SERVER_DB_NAME//./__}
		SERVER_ID=$(psql $CONN_STRING -tqc "INSERT INTO dsc.server (name, display_name) VALUES ('$SERVER_DB_NAME', '${aNODES["server_name"]}') RETURNING id;")
		echo "Added server ${aNODES["server_name"]}"
		NEW_SERVER=1
	fi
	
	NODE_ID=$(psql $CONN_STRING -tc "select id from dsc.node where server_id=$SERVER_ID and name='${aNODES["node_name"]}'")
	if [ ${aNODES["node_ip"]} != "null" ] ; then
		aNODES["node_ip"]="'${aNODES["node_ip"]}'"
	fi
	if [ -z "$NODE_ID" ] ; then
		NODE_ID=$(psql $CONN_STRING -tqc "INSERT INTO dsc.node (server_id, name, region, country, city, subgroup, ip) VALUES ($SERVER_ID, '${aNODES["node_name"]}', '${aNODES["node_region"]}', '${aNODES["node_country"]}', '${aNODES["node_city"]}', '${aNODES["node_subgroup"]}', ${aNODES["node_ip"]});")
		echo "Added node ${aNODES["node_name"]}"
	else
		# It would be nice here to only update when something has changed so the user can easily see what changed
		psql $CONN_STRING -c "UPDATE dsc.node SET server_id=$SERVER_ID, name='${aNODES["node_name"]}', region='${aNODES["node_region"]}', country='${aNODES["node_country"]}', city='${aNODES["node_city"]}', subgroup='${aNODES["node_subgroup"]}', ip=${aNODES["node_ip"]} where id=$NODE_ID;"
		echo "Updated node ${aNODES["node_name"]} for server ${aNODES["server_name"]}"
	fi
	mkdir -p $DATA_DIR/${aNODES["server_name"]}/${aNODES["node_name"]}/incoming
	chmod 775 $DATA_DIR/${aNODES["server_name"]}/${aNODES["node_name"]}/incoming
   
	junk=""
done < ${NODES_FILE}

if [ ${NEW_SERVER} -eq 1 ] ; then
	echo
	echo "********************************************************************************"
	echo "New servers have been added to Hedgehog! To enable the import of data for this"
	echo "server the 'manage_partitions' script MUST be run manually now."
	echo "********************************************************************************"
	echo
fi

echo "$(date): $0 COMPLETED"