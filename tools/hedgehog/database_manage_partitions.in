#!/bin/bash
# 
# Copyright 2014, 2015, 2016 Internet Corporation for Assigned Names and Numbers.
# 
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, you can obtain one at https://mozilla.org/MPL/2.0/.

#
# Developed by Sinodun IT (www.sinodun.com)
#

# 
# File:   database_manage_partitions

# We need a write user
a=$(@LIBEXEC@/check_user_perms -wc)
if [ $? -ne 0 ] ; then
	echo "$a"
	exit 1
fi
eval "$a"
export PGPASSWORD=$PGPASSWORD

usage () {
	echo
	echo "Create a new set of partitioned data tables in the database to hold imported data."
	echo "The partitions are created per month of data."
	echo
	echo "Usage: $(basename "$0") options"
	echo
	echo "Supported options:"
	echo " -m Month to create partitions for (default is next month, format YYYY-MM)."
	echo " -h Show this help."
}

while getopts ":m:h" opt; do
    case $opt in
        m  ) PDATE=$OPTARG ;;
        h  ) usage
             exit 1 ;;
        \? ) usage
             exit 1 ;;
    esac
done

echo "$(date): $0 COMMENCED"

if [ -z "$PDATE" ] ; then
    NOW=$(date --date="+1 month" +%Y_%m)
    NEXT=$(date --date="+2 month" +%Y_%m)
else
	if [[ ! $PDATE =~ ^[0-9]{4}-[0-1][0-9]$ ]] ; then
			echo "Error: The start date is not in the required format of YYYY-MM" 
			exit 1
	fi
	# Validate the input date. Add day since (oddly) date won't parse just year and month
	date "+%Y-%m-%d" --date="${PDATE}-01" >/dev/null 2>&1
	is_valid=$?
	if [ ${is_valid} -ne 0 ] ; then
		echo "Error: The start date is invalid" 
		exit 1
	fi
	
    NOW=$(date --date="$PDATE-01" +%Y_%m)
    
    IFS='_' read -a YM <<< "$NOW"
    YEAR=${YM[0]}
    MONTH=${YM[1]}
    NEXT="${YEAR}_$(( ${MONTH#0} + 1))"

    if [ ${MONTH#0} -eq 12 ] ; then
        NEXT=$((YEAR + 1))"_01"
    fi
fi

SERVERS=$(psql $CONN_STRING -tc "SELECT name FROM dsc.server;")
PLOTS=$(psql $CONN_STRING -tc "SELECT name FROM dsc.dataset;")

for server in $SERVERS
do
    s_id=$(psql $CONN_STRING -tc "SELECT id FROM dsc.server WHERE name = '$server';")
    for plot in $PLOTS
    do
      p_id=$(psql $CONN_STRING -tc "SELECT id FROM dsc.dataset WHERE name = '$plot';")
      
      psql $CONN_STRING <<EOF
BEGIN;

CREATE TABLE dsc.data_${server}_${plot}_${NOW} (
  CHECK (starttime >= TIMESTAMP '$NOW-01 00:00:00' AT TIME ZONE 'UTC' AND starttime < TIMESTAMP '$NEXT-01 00:00:00' AT TIME ZONE 'UTC'),
  CHECK (plot_id = $p_id),
  CHECK (server_id = $s_id)
) INHERITS (dsc.data);

ALTER TABLE dsc.data_${server}_${plot}_${NOW}
        ADD CONSTRAINT pk_data_${server}_${plot}_${NOW} PRIMARY KEY (server_id, node_id , plot_id , starttime , key1, key2 ),
        ADD CONSTRAINT fk_data_${server}_${plot}_${NOW}_node FOREIGN KEY (node_id) REFERENCES dsc.node (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION,
        ADD CONSTRAINT fk_data_${server}_${plot}_${NOW}_plot FOREIGN KEY (plot_id) REFERENCES dsc.dataset (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION;
CREATE INDEX idx_data_${server}_${plot}_${NOW}_node_id ON dsc.data_${server}_${plot}_${NOW} (node_id);
COMMIT;
EOF
    done
done

echo "$(date): $0 COMPLETED"
