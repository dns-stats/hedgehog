#!/bin/bash
# 
# Copyright 2014, 2015, 2016 Internet Corporation for Assigned Names and Numbers.
# 
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, you can obtain one at https://mozilla.org/MPL/2.0/.

#
# Developed by Sinodun IT (www.sinodun.com)
#

# 
# File:   rssac_generate_reports
#

#TODO(asap): Add a flag to allow the user to specify a single server to run the report for

# eval $(@LIBEXEC@/conf_read)

a=$(@LIBEXEC@/check_user_perms -pgc)
if [ $? -ne 0 ] ; then
	echo $a
	exit 1
fi
eval $a
export PGPASSWORD=$PGPASSWORD

DEFAULT_DAY=$(date --date="- 7 day" +%Y-%m-%d)
START=$(date --date="${DEFAULT_DAY}" +%Y-%m-%dT00:00)
INPUT_START=""

usage () {
    echo
    echo "Create RSSAC reports for a specified 24 hour period"
    echo "(Requires data to have been processed using the database_process_rssac_data script)"
    echo
    echo "Usage: $(basename $0) options"
    echo
    echo "Supported options:"
    echo "  -d Date on which to create RSSAC reports (default is 7 days ago: \"${DEFAULT_DAY}\", format: YYYY-MM-DD)"
    echo "  -h Show this help"
}

while getopts ":d:h" opt; do
    case $opt in
        d  ) INPUT_START=$OPTARG ;;
        h  ) usage
             exit 1 ;;
        \? ) usage
             exit 1 ;;
    esac
done

echo "$(date): $0 COMMENCED"

# Validate the input date
if [ ! -z "${INPUT_START}" ] ; then
	if [[ ! $INPUT_START =~ ^[0-9]{4}-[0-1][0-9]-[0-3][0-9]$ ]] ; then
			echo "Error: The start date is not in the required format of YYYY-MM-DD" 
			exit 1
	fi
	date "+%Y-%m-%d" --date="${INPUT_START}" >/dev/null 2>&1
	is_valid=$?
	if [ ${is_valid} -ne 0 ] ; then
		echo "Error: The start date is invalid" 
		exit 1
	fi
	START=$(date --date="${INPUT_START}" +%Y-%m-%dT00:00)
        DEFAULT_DAY=$(date --date="${INPUT_START}" +%Y-%m-%d)
fi

STOP=$(date --date="${START}" +%Y-%m-%dT23:59)

SQ="'"
CURL_ARGS="--max-time 300 --retry 1 --get"
# TODO: do not hardcode this path
URL="localhost/hedgehog/brew/hedgehog.brew"
TOP_OUTPUTDIR="$RSSAC_DIR/$(date --date=${START} +%Y)/$(date --date=${START} +%m)"
TYPES="generateYaml generatePlot"
GVIS=0
# Specify some strings for special handling
TRAFFIC_SIZE_SMALL="traffic_sizes_small"
TRAFFIC_SIZE_BIG="traffic_sizes_big"
TRAFFIC_SIZE_REP_NAME="traffic-sizes"
TRAFFIC_VOLUME_DIFF="traffic_volume_difference"

echo
echo "Creating RSSAC reports from ${START} to ${STOP} in ${TOP_OUTPUTDIR}" 
echo

PLOTIDS=$(psql $CONN_STRING -tc "SELECT id FROM dsc.plot where ddcategory='9.RSSAC' and name != '$TRAFFIC_VOLUME_DIFF' ORDER BY id DESC;")
SERVERNMS=$(psql $CONN_STRING -tc "SELECT display_name FROM dsc.server;")
NDARR=-1 # all nodes

for SVRNM in $SERVERNMS ; do
    SVRID=$(psql $CONN_STRING -tc "SELECT id FROM dsc.server WHERE display_name=${SQ}${SVRNM}${SQ};" | tr -d [[:space:]])
    SVRNM_LC="$(echo ${SVRNM} | tr '[:upper:]' '[:lower:]')"

    for TYPE in $TYPES ; do
        EXT="yaml"
        if [ "${TYPE}" == "generatePlot" ] ; then
			EXT="png"
		fi
		
        for PLTID in $PLOTIDS ; do
			PLTNM=$(psql $CONN_STRING -tc "SELECT name FROM dsc.plot where id=${PLTID};" | sed 's/[[:space:]]//g')
			# Clear out the file in the plot cache to make sure we get the most up to date plots in the reports
			rm -rf $RSSAC_DIR/${SVRNM}/${PLTNM}/${START}-${STOP}-all*.png >/dev/null 2>&1
			# Generate the file. Yaml gets written to the rssac directory, plots go into the plotcache
			echo "*** Generating '${EXT}' for: " ${PLTNM}
			CURL_URL="${URL}?type=${TYPE}&start=${START}&stop=${STOP}&gvis=${GVIS}&pltid=${PLTID}&svrnm=${SVRNM}&svrid=${SVRID}&ndarr=${NDARR}"
            echo $(date) ": curl $CURL_ARGS \"$CURL_URL\""
            RESULT=$(curl $CURL_ARGS "$CURL_URL" 2>&1)
            echo ${RESULT}
			echo
			
            if [ "${TYPE}" == "generatePlot" ] ; then
				# Retrieve the plot from the plot cache
                PLTFILE=$(echo ${RESULT} | sed 's/^.* src="\([^"?]*\).*/\1/' | sed "s:../plotcache:$PLOT_CACHE_DIR:" | sed 's/-log//' | sed 's/-stack//')

                if [ "${PLTFILE}" != "plots/no_graph.png" ] && [ "${PLTFILE}" != "plots/no_results.png" ] && [ "${PLTFILE}" != "plots/no_connection.png" ] ; then                   
					# Report names are the same as plot names but use dash instead of underscore
					# TODO: use $PLTNM instead of redoing the query then substitute _ with -
					REP_NAME=$(psql $CONN_STRING -tc "SELECT name FROM dsc.plot where id=${PLTID};" | sed 's/_/-/g' | sed 's/[[:space:]]//g')
					# Special handling. The traffic size data has 2 plots but both need to go into the same directory
					PLT_DIR_NM=${REP_NAME}
					if [ "${PLTNM}" == "${TRAFFIC_SIZE_SMALL}" ] || [ "${PLTNM}" == "${TRAFFIC_SIZE_BIG}" ] ; then
						PLT_DIR_NM="${TRAFFIC_SIZE_REP_NAME}"
					fi
                    OUTPUTDIR="${TOP_OUTPUTDIR}/${PLT_DIR_NM}/"
                    OUTPUTFILE="${SVRNM_LC}-`date --date=${START} +%Y%m%d`-${REP_NAME}.png"
                    cp ${PLTFILE} ${OUTPUTDIR}${OUTPUTFILE}
                fi
            fi
        done
    done
done
echo "$(date): $0 COMPLETED"
