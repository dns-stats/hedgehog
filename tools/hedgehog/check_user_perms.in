#!/bin/bash
# 
# Copyright 2014, 2015, 2016 Internet Corporation for Assigned Names and Numbers.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Developed by Sinodun IT (www.sinodun.com)
#

# 
# File:   check_user_perms
#

# This script should be called like this:
# a=$(@LIBEXEC@/check_user_perms -wfc)
# if [ $? -ne 0 ] ; then
#   echo $a
#   exit 1
# fi
# eval $a
# export PGPASSWORD=$PGPASSWORD


eval $(@LIBEXEC@/conf_read)

usage () {
  echo
  echo "Check if we are a valid read user and check that we can connect to the DB"
  echo "Optionally specify DB version checking, directory permission checking"
  echo "or check for write access to the DB."
  echo
  echo "Usage: $(basename "$0") options"
  echo
  echo "Supported options:"
  echo "  -C <API_VERSION> specify DB API version to check for (implies -c)"
  echo "  -n Indicate that the user doesn't need to access the database"
  echo "  -s <SERIAL_NUMBER> check DB serial number"
  echo "  -c check databse API version against the build time API version"
  echo "  -f check user has write permission to $hhconfig_directories_data"
  echo "  -g check user has write permission to web directory ${hhconfig_directories_rssac%rssac}"
  echo "  -p check user has write permission to plotcache directory $hhconfig_directories_plotcache"
  echo "  -r check user has write permission to rssac directory ${hhconfig_directories_rssac}"
  echo "  -w check we are a write user of the DB"
  echo "  -U specify a DB user"
  echo "  -P specify a DB password"
  echo "  -d run in debug mode"
  echo "  -h Show this help"
}

# Read only access by default
WRITER=0
CHECK_API=0
CHECK_SERIAL=0
CHECK_DATA_DIR=0
CHECK_WEB_DIR=0
CHECK_RSSAC_DIR=0
CHECK_PLOT_CACHE_DIR=0
SPECIFIED_PASS=""
SPECIFIED_USER=""
# By default check for a database connection
CHECK_DB_CONN=1
MY_USER=$(whoami)

REQUIRED_API_VERSION=@DB_VERSION@

while getopts ":C:ncdfgprP:s:U:whv" opt; do
    case $opt in
    C  ) REQUIRED_API_VERSION=$OPTARG
         CHECK_API=1 ;;
    n  ) CHECK_DB_CONN=0 ;;
    c  ) CHECK_API=1 ;;
    d  ) set -x ;;
    f  ) CHECK_DATA_DIR=1 ;;
    g  ) CHECK_WEB_DIR=1 ;;
    p  ) CHECK_PLOT_CACHE_DIR=1 ;;
    P  ) SPECIFIED_PASS=$OPTARG ;;
    p  ) CHECK_RSSAC_DIR=1 ;;
    s  ) CHECK_SERIAL=1
         REQUIRED_DDL_SERIAL=$OPTARG ;;
    U  ) SPECIFIED_USER=$OPTARG ;;
    w  ) WRITER=1 ;;
    h  ) usage
         exit 0 ;;
    v  ) echo "<VERSION>"
         exit 0 ;;
    \? ) echo "Unknown arguments. Use -h for help"
         exit 1 ;;
    esac
done
if [ $CHECK_DB_CONN -eq 1 ] ; then

  USER_NAME=$hhconfig_database_read_user
  if [ -z "$USER_NAME" ]; then
    echo "Database user name not set"
    exit 1
  fi
  export PGPASSWORD="$hhconfig_database_read_pass"
  if [ $WRITER -eq 1 ] ; then
    USER_NAME=$hhconfig_database_owner
    export PGPASSWORD="$hhconfig_database_owner_pass"
  fi
  if [ -n "$SPECIFIED_USER" ] ; then
    USER_NAME=$SPECIFIED_USER
    export PGPASSWORD="$SPECIFIED_PASS"
  fi

  # If the password is set then assume md5 authentication otherwise you must be
  # a user with the same name as the hedgehog database owner and are using peer
  # authentication
  if [ -z "$PGPASSWORD" ] ; then
    if [ "$MY_USER" != "$USER_NAME" ] ; then
      echo "Must be user: '$USER_NAME' and using peer authentication to run this script, currently '$MY_USER'"
      exit 1
    fi
  fi

  PORT=$hhconfig_database_port
  if [ -z "$PORT" ] ; then
    PORT=5432
  fi
  DB_NAME=$hhconfig_database_name
  if [ -z "$DB_NAME" ] ; then
    echo "Database name not set"
    exit 1
  fi
  DB_HOST=$hhconfig_database_host
  if [ -z "$DB_HOST" ]; then
    echo "Database host not set"
    exit 1
  fi

  CONN_STRING="-h $DB_HOST -U $USER_NAME -p $PORT -d $DB_NAME"
  CONN_STRING_XX="host=$DB_HOST port=$PORT dbname=$DB_NAME password=$PGPASSWORD"
  # Test connection to the database
  psql $CONN_STRING -tc "\conninfo" > /dev/null
  if [ $? -ne 0 ] ; then
    echo "Error connecting to database using connection string $CONN_STRING"
    exit 1
  fi

  # Now test the optional parameters...
  TEST=$(psql $CONN_STRING -tc "SELECT has_table_privilege('dsc.version', 'SELECT')" | tr -d '[:space:]')
  if [ $WRITER -eq 1 ] ; then
    TEST=$(psql $CONN_STRING -tc "SELECT has_table_privilege('dsc.version', 'INSERT')" | tr -d '[:space:]')
  fi

  if [ "x$TEST" == "xt" ] ; then
    if [ $CHECK_API -eq 1 ] ; then
      DB_API_VERSION=$(psql $CONN_STRING -tc  "select version from dsc.version;")
      if [ $DB_API_VERSION -ne $REQUIRED_API_VERSION ] ; then
        echo "Error: Database API version incorrect: Found $DB_API_VERSION expected $REQUIRED_API_VERSION"
        exit 1
      fi
    fi
  else
    echo "The user '$USER_NAME' does not have the expected database access."
    exit 1
  fi
fi

if [ $CHECK_SERIAL -eq 1 ] ; then
  LAST_SERIAL=$(psql $CONN_STRING -tc "select max(serial) from dsc.internal_version;")
  if [ $LAST_SERIAL -ne $REQUIRED_DDL_SERIAL ] ; then
    echo "Error: DDL scripts have not been run in correct order. Required $REQUIRED_DDL_SERIAL, actual version is $LAST_SERIAL"
    exit 1
  fi
fi

if [ $CHECK_DATA_DIR -eq 1 ] ; then
  OWNER=$(stat -c %U $hhconfig_directories_data)
  if [ "$OWNER" != "$MY_USER" ] ; then
    echo "The user '$MY_USER'  does not have write access to the data dirctory $hhconfig_directories_data owned by '$OWNER'"
    exit 1
  fi
fi

if [ $CHECK_WEB_DIR -eq 1 ] ; then
  # The %rssac removes rssac from the end of the path, thus checking the www directory instead.
  mydir=${hhconfig_directories_rssac/%rssac/}
  WWW_OWNER=$(stat -c %U $mydir)
  if [ "$WWW_OWNER" != "$MY_USER" ] ; then
    echo "The user '$MY_USER'  does not have write access to the www dirctory $mydir owned by '$WWW_OWNER'"
    exit 1
  fi
fi

if [ $CHECK_PLOT_CACHE_DIR -eq 1 ] ; then
  OWNER=$(stat -c %U $hhconfig_directories_plotcache)
  if [ "$OWNER" != "$MY_USER" ] ; then
    echo "The user '$MY_USER'  does not have write access to the plotcache dirctory $hhconfig_directories_plotcache owned by '$OWNER'"
    exit 1
  fi
fi

if [ $CHECK_RSSAC_DIR -eq 1 ] ; then
  OWNER=$(stat -c %U $hhconfig_directories_rssac)
  if [ "$OWNER" != "$MY_USER" ] ; then
    echo "The user '$MY_USER'  does not have write access to the rssac dirctory $hhconfig_directories_rssac, owned by '$OWNER'"
    exit 1
  fi
fi

# print env variables for eval to process in calling script
echo "RSSAC_DIR=\"$hhconfig_directories_rssac\""
echo "CONF_DIR=\"$hhconfig_directories_conf\""
echo "PLOT_CACHE_DIR=\"$hhconfig_directories_plotcache\""
echo "DATADIR=\"$hhconfig_directories_data\""
echo "PGPASSWORD=\"$PGPASSWORD\""
echo "CONN_STRING=\"$CONN_STRING\""
echo "CONN_STRING_XX=\"$CONN_STRING_XX\""
exit 0