#!/bin/bash
# 
# Copyright 2014, 2015, 2016 Internet Corporation for Assigned Names and Numbers.
# 
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, you can obtain one at https://mozilla.org/MPL/2.0/.
#

# Developed by Sinodun IT (www.sinodun.com)
#

# 
# File:   plotcache_generate_cached_plots
#

# We need user with access to the plotcache directory
a=$(@LIBEXEC@/check_user_perms -pc)
if [ $? -ne 0 ] ; then
	echo $a
	exit 1
fi
eval $a
export PGPASSWORD=$PGPASSWORD

FROM=$(date --date="- 1 day" +%Y-%m-%dT00:00)
TO=$(date --date="- 1 day" +%Y-%m-%dT23:59)
SQ="'"

usage () {
    echo
    echo "Create cached plots for each chosen period (day/week/month) between Start and End range of time"
    echo "You must add at least one option for which plot window to generate [-D|-W|-M]"
    echo
    echo "Usage: $(basename $0) options"
    echo
    echo "Supported options:"
    echo "  -s Start date and time for which to create cached plots (default: \"${FROM}\")"
    echo "  -e End date and time for which to create cached plots (default: \"${TO}\")"
    echo "  -D Generate daily cached plots"
    echo "  -W Generate weekly cached plots"
    echo "  -M Generate monthly cached plots"
    echo "  -h Show this help."
}

while getopts ":s:e:DWMh" opt; do
    case $opt in
        s  ) FROM=$OPTARG ;;
        e  ) TO=$OPTARG ;;
        D  ) DAY=1 ;;
        W  ) WEEK=1 ;;
        M  ) MONTH=1 ;;
        h  ) usage
             exit 1 ;;
        \? ) usage
             exit 1 ;;
    esac
done

echo "$(date): $0 COMMENCED"

# Validate the start date
if [[ ! $FROM =~ ^[0-9]{4}-[0-1][0-9]-[0-3][0-9]T[0-2][0-9]:[0-5][0-9]$ ]] ; then
		echo "Error: The start date is not in the required format of YYYY-MM-DDThh:mm" 
		exit 1
fi
date "+%Y-%m-%dT%H:%M" --date="${FROM}" >/dev/null 2>&1
is_valid=$?
if [ ${is_valid} -ne 0 ] ; then
	echo "Error: The start date is invalid" 
	exit 1
fi

# Validate the end date
if [[ ! $TO =~ ^[0-9]{4}-[0-1][0-9]-[0-3][0-9]T[0-2][0-9]:[0-5][0-9]$ ]] ; then
		echo "Error: The end date is not in the required format of YYYY-MM-DDThh:mm" 
		exit 1
fi
date "+%Y-%m-%dT%H:%M" --date="${TO}" >/dev/null 2>&1
is_valid=$?
if [ ${is_valid} -ne 0 ] ; then
	echo "Error: The end date is invalid" 
	exit 1
fi

# Check that Start date is earlier than End date
FROM_seconds=$(date --utc --date "${FROM}" +%s)
TO_seconds=$(date --utc --date "${TO}" +%s)
if [ ${FROM_seconds} -ge ${TO_seconds} ] ; then
  echo "Error: Start date must be earlier than End date to generate plots"
  exit 1
fi

if [[ -z "$DAY" && -z "$WEEK" && -z "$MONTH" ]] ; then
  usage
  exit 1
fi

echo "INFO: $(find $PLOT_CACHE_DIR -type f | wc -l) cached plots"
echo "SYSMON INFO: $(du -c $PLOT_CACHE_DIR | grep total) disk usage for $PLOT_CACHE_DIR"

# TODO: do not hard code this path
URL="localhost/hedgehog/brew/hedgehog.brew"
TYPE="generatePlot"
declare -a STOPS=($(seq $(date +%s -d ${TO}) -86400 $(date +%s -d ${FROM})))
INTERACTIVE="0 1"
PLOTIDS=$(psql $CONN_STRING -tc "select id from dsc.plot where name in (select name from dsc.visible_plot) ORDER BY id DESC;")
SERVERNMS=$(psql $CONN_STRING -tc "SELECT display_name FROM dsc.server;")
NDARR=-1 # all nodes

# Call brew script in order to cache the default plots
for SVRNM in $SERVERNMS ; do
    SVRID=$(psql $CONN_STRING -tc "SELECT id FROM dsc.server WHERE display_name=${SQ}${SVRNM}${SQ};" | tr -d [[:space:]])
    for STOP in ${STOPS[@]} ; do
        STOP=$(date --date @${STOP} +%Y-%m-%dT%R)
        STARTS=()
        [ -n "$DAY" ] && STARTS+=($(date --date="${STOP}" +%Y-%m-%dT00:00))
        [ -n "$WEEK" ] && STARTS+=($(date --date="${STOP} 1 week ago + 1 day" +%Y-%m-%dT00:00))
        [ -n "$MONTH" ] && STARTS+=($(date --date="${STOP} 1 month ago + 1 day" +%Y-%m-%dT00:00))
        for START in ${STARTS[@]} ; do
            for GVIS in $INTERACTIVE ; do
                for PLTID in $PLOTIDS ; do
                    echo $(date) ": curl --max-time 300 --retry 1 --get \"${URL}?type=${TYPE}&start=${START}&stop=${STOP}&gvis=${GVIS}&pltid=${PLTID}&svrnm=${SVRNM}&svrid=${SVRID}&ndarr=${NDARR}\""
                    curl -s -o /dev/null --max-time 300 --retry 1 --get "${URL}?type=${TYPE}&start=${START}&stop=${STOP}&gvis=${GVIS}&pltid=${PLTID}&svrnm=${SVRNM}&svrid=${SVRID}&ndarr=${NDARR}" 2>&1
                done
            done
        done
    done
done

echo "INFO: $(find $PLOT_CACHE_DIR -type f | wc -l) cached plots"
echo "SYSMON INFO: $(du -c $PLOT_CACHE_DIR | grep total) disk usage for $PLOT_CACHE_DIR"
echo "$(date): $0 COMPLETED"