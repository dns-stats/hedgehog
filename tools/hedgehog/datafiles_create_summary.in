#!/bin/bash
# 
# Copyright 2014, 2015, 2016 Internet Corporation for Assigned Names and Numbers.
# 
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, you can obtain one at https://mozilla.org/MPL/2.0/.

#
# Developed by Sinodun IT (www.sinodun.com)
#

# 
# File:   datafiles_create_summary
#

# We need user with access to the database
a=$(@LIBEXEC@/check_user_perms -c)
if [ $? -ne 0 ] ; then
	echo $a
	exit 1
fi
eval $a
export PGPASSWORD=$PGPASSWORD
RED='\033[0;31m'
LOG_FILE="dsc-extractor-xml-db.out"
NODE_NAME=""
SERVER_NAME=""
FORMAT_STRING="----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
FORMAT_SEP="|"

print_header () {
	echo $FORMAT_STRING
	echo " Server    $FORMAT_SEP Node      $FORMAT_SEP Last import started $FORMAT_SEP Last file processed $FORMAT_SEP Files found $FORMAT_SEP Files remaining $FORMAT_SEP Failures $FORMAT_SEP Last file processed                          $FORMAT_SEP Time      $FORMAT_SEP Error found in last"
	echo "           $FORMAT_SEP           $FORMAT_SEP                     $FORMAT_SEP at                  $FORMAT_SEP in incoming $FORMAT_SEP in import job   $FORMAT_SEP          $FORMAT_SEP                                              $FORMAT_SEP taken (s) $FORMAT_SEP 20 lines of file"
	echo $FORMAT_STRING
}

usage () {
	echo
	echo "Generate a processing report based on the information in the log files"
	echo 
	echo "Usage: $(basename $0) options"
	echo
	echo "Supported options:"
	echo "	-s Only report on the server with this name (default is all servers)"
	echo "	-n Only report on the node with this name (default is all nodes)"
	echo "	-c Output in csv format for import into spreadsheet application"
	echo "	-d Run in debug mode (set -x)"
	echo "	-h Show this help."
}

while getopts ":s:n:cdh" opt; do
    case $opt in
		n  ) NODE_NAME=$OPTARG ;;
		s  ) SERVER_NAME=$OPTARG ;;
		d  ) set -x ;;
		c  ) FORMAT_STRING=""
		     FORMAT_SEP=',';;
        h  ) usage
             exit 1 ;;
        \? ) usage
             exit 1 ;;
    esac
done

TOTAL_IN_PROGRESS=0

if [ -z "${SERVER_NAME}" ] ; then
	SERVER_NAMES=$(psql $CONN_STRING -tc "select display_name from dsc.server")
else 
	SERVER_NAMES=$SERVER_NAME
fi

print_header

MIDNIGHT=$(date --date="00:00 today" +%s)

declare -a PROCESSING_NODES

for SERVER in $SERVER_NAMES ; do

	test -L $DATADIR/$SERVER && continue;
	test -d $DATADIR/$SERVER || continue;

	SERVER_ID=$(psql $CONN_STRING -tc "select id from dsc.server where display_name='${SERVER}'")

	if [ -z "${NODE_NAME}" ] ; then
		NODE_NAMES=$(psql $CONN_STRING -tc "select name from dsc.node where server_id=$SERVER_ID")
	else
		NODE_NAMES=$NODE_NAME
	fi
	COUNTER=0
	for NAME in $NODE_NAMES  ; do

		FILE_NAME=$DATADIR/$SERVER/$NAME/$LOG_FILE
		if [ ! -f "${FILE_NAME}" ] ; then
			continue
		fi

		if [ ! -d "$DATADIR/$SERVER/$NAME/incoming/" ] ; then
			continue
		fi

		if [ ! "$(ls -A $DATADIR/$SERVER/$NAME/incoming/)" ] ; then
			continue
		fi

		COUNTER=$(( COUNTER + 1 ))
		# Get the last date that import started:
		IMPORT_START_TIME=$(tac ${FILE_NAME} | grep -e 'UTC ----------------------$' -m1 | awk '{print $2, $3}')
		COMPLETED_LINE=$(tac ${FILE_NAME} | grep -e 'Completed' -m1 | awk '{print $1, $2, $5, $6, $8, $9}')
		IMPORT_LATEST_TIME=$(echo $COMPLETED_LINE | awk '{print $1, $2}')

		FOUND_FILES=$(find ${DATADIR}/${SERVER}/${NAME}/incoming/*/ -name \*.xml | wc -l)
		FILES_REMAINING_NUMBER=$(echo $COMPLETED_LINE | awk '{print $4}')
		FILES_FOUND_NUMBER=$(echo $FOUND_FILES | awk '{print $1}' )
		FILES_FAILED=$(echo $COMPLETED_LINE | sed 's/(//'  | awk '{print $5}')

		LAST_FILE_PATH=$(echo $COMPLETED_LINE | awk '{print $3}')
		LAST_FILE_NAME=$(basename "$LAST_FILE_PATH")
		LAST_FILE_UNIX_TIME="${LAST_FILE_NAME%.*.*}"
		if [ -z $LAST_FILE_UNIX_TIME ] ; then
			LAST_FILE=""
		else
			LAST_FILE=$(date -d @${LAST_FILE_UNIX_TIME} "+%Y-%m-%d %H:%M:%S")
		        LAST_FILE_START_TIME=$(tac ${FILE_NAME} |  grep -e "Starting:  ${LAST_FILE_PATH}"  -m 1 | awk '{print $1 " " $2}')
			LAST_FILE_FINISH_TIME=$(echo $COMPLETED_LINE | awk '{print $1 " " $2}')
			LAST_FILE_START_UNIX_TIME=$(date --date="${LAST_FILE_START_TIME}" +"%s")
			LAST_FILE_FINISH_UNIX_TIME=$(date --date="${LAST_FILE_FINISH_TIME}" +"%s")
			DURATION=$(( LAST_FILE_FINISH_UNIX_TIME - LAST_FILE_START_UNIX_TIME))
		fi
		(( TOTAL_FILES_FOUND = TOTAL_FILES_FOUND + FILES_FOUND_NUMBER ))

		ERR_COUNT=$(tail ${FILE_NAME} -n 20 | grep  -i -e 'Error' | grep  -v 'lock pid file' | wc -l)
		if [ $ERR_COUNT -ne 0 ] ; then
			ERROR_STR="YES"
		else
			ERROR_STR="NO"
		fi

		if [ $FILES_REMAINING_NUMBER -gt 0 ] && [ $ERROR_STR == "NO" ] ; then
			(( TOTAL_IN_PROGRESS = TOTAL_IN_PROGRESS + 1 ))
			(( TOTAL_PROCESSING_TIME = TOTAL_PROCESSING_TIME + DURATION ))
			PROCESSING_NODES+=" "${SERVER}/${NAME}
		fi
		
		if [ $LAST_FILE_UNIX_TIME -lt $MIDNIGHT ] ; then
			# color red
			printf '\033[0;31m%-10s %-1s %-9s %-1s %-16s %-1s %-19s %-1s %-11s %-1s %-15s %-1s %-8s %-1s %-19s %-22s %-1s %-9s %-1s %-15s\033[0m\n'  "$SERVER" $FORMAT_SEP  "$NAME" $FORMAT_SEP "${IMPORT_START_TIME}" $FORMAT_SEP "$IMPORT_LATEST_TIME" $FORMAT_SEP "$FOUND_FILES" $FORMAT_SEP "$FILES_REMAINING_NUMBER" $FORMAT_SEP  "$FILES_FAILED" $FORMAT_SEP "$LAST_FILE" "($LAST_FILE_NAME)" $FORMAT_SEP "$DURATION" $FORMAT_SEP "${ERROR_STR}"
		elif [ $FOUND_FILES -gt 720 ] ; then
			# color yellow
			printf '\033[0;33m%-10s %-1s %-9s %-1s %-16s %-1s %-19s %-1s %-11s %-1s %-15s %-1s %-8s %-1s %-19s %-22s %-1s %-9s %-1s %-15s\033[0m\n'  "$SERVER" $FORMAT_SEP  "$NAME" $FORMAT_SEP "${IMPORT_START_TIME}" $FORMAT_SEP "$IMPORT_LATEST_TIME" $FORMAT_SEP "$FOUND_FILES" $FORMAT_SEP "$FILES_REMAINING_NUMBER" $FORMAT_SEP  "$FILES_FAILED" $FORMAT_SEP "$LAST_FILE" "($LAST_FILE_NAME)" $FORMAT_SEP "$DURATION" $FORMAT_SEP "${ERROR_STR}"
		else
			# no color
			printf '%-10s %-1s %-9s %-1s %-16s %-1s %-19s %-1s %-11s %-1s %-15s %-1s %-8s %-1s %-19s %-22s %-1s %-9s %-1s %-15s\n'  "$SERVER" $FORMAT_SEP  "$NAME" $FORMAT_SEP "${IMPORT_START_TIME}" $FORMAT_SEP "$IMPORT_LATEST_TIME" $FORMAT_SEP "$FOUND_FILES" $FORMAT_SEP "$FILES_REMAINING_NUMBER" $FORMAT_SEP  "$FILES_FAILED" $FORMAT_SEP "$LAST_FILE" "($LAST_FILE_NAME)" $FORMAT_SEP "$DURATION" $FORMAT_SEP "${ERROR_STR}"
		fi

		if [ $COUNTER -eq 21 ] ; then
			print_header
			COUNTER=0
		fi
	done
done
print_header

echo "Time: " $(date "+%Y-%m-%d %H:%M:%S") " Total files remaining to import: " $TOTAL_FILES_FOUND
PERF=$(( TOTAL_PROCESSING_TIME / TOTAL_IN_PROGRESS ))
echo "Time: " $(date "+%Y-%m-%d %H:%M:%S") " Processors in progress: " ${TOTAL_IN_PROGRESS} " at approx " ${PERF} " seconds per datafile"
echo "List of nodes currently processing: $PROCESSING_NODES"
