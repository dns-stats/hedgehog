#!/bin/bash
# 
# Copyright 2014, 2015, 2016 Internet Corporation for Assigned Names and Numbers.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Developed by Sinodun IT (www.sinodun.com)
#

# 
# File:   datafiles_create_summary
#

# We need user with access to the data directory
a=$(@LIBEXEC@/check_user_perms -fnc)
if [ $? -ne 0 ] ; then
	echo $a
	exit 1
fi
eval $a


LOG_FILE="dsc-extractor-xml-db.out"
FILE_DIR="incoming"
NODE_NAME=""
SERVER_NAME=""
FORMAT_STRING="-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
FORMAT_SEP="|"

usage () {
	echo
	echo "Generate a processing report based on the information in the log files"
	echo 
	echo "Usage: $(basename $0) options"
	echo
	echo "Supported options:"
	echo "	-s Only report on the server with this name (default is all servers)"
	echo "	-n Only report on the node with this name (default is all nodes)"
	echo "	-c Output in csv format for import into spreadsheet application"
	echo "	-d Run in debug mode (set -x)"
	echo "	-h Show this help."
}

while getopts ":s:n:cdh" opt; do
    case $opt in
		n  ) NODE_NAME=$OPTARG ;;
		s  ) SERVER_NAME=$OPTARG ;;
    d  ) set -x ;;
		c  ) FORMAT_STRING=""
		     FORMAT_SEP=',';;
        h  ) usage
             exit 1 ;;
        \? ) usage
             exit 1 ;;
    esac
done

TOTAL_FILES_REMAINING=0

if [ -z "${SERVER_NAME}" ] ; then
	SERVER_NAMES=$(ls -1 ${DATADIR})
else 
	SERVER_NAMES=$SERVER_NAME
fi

echo $FORMAT_STRING
echo " Server   $FORMAT_SEP Node      $FORMAT_SEP Last import started $FORMAT_SEP Last file processed $FORMAT_SEP Last file processed  $FORMAT_SEP Time taken for $FORMAT_SEP Files found $FORMAT_SEP Outstanding $FORMAT_SEP Import   $FORMAT_SEP Error found in last 20 lines of file" 
echo "          $FORMAT_SEP           $FORMAT_SEP                     $FORMAT_SEP at                  $FORMAT_SEP                      $FORMAT_SEP last file (s)  $FORMAT_SEP by import   $FORMAT_SEP files       $FORMAT_SEP failures $FORMAT_SEP Error found in last 20 lines of file" 
echo $FORMAT_STRING

for SERVER in $SERVER_NAMES ; do

	test -L $DATADIR/$SERVER && continue;
	test -d $DATADIR/$SERVER || continue;

	if [ -z "${NODE_NAME}" ] ; then
		NODE_NAMES=$(ls -1 $DATADIR/$SERVER)
	else 
		NODE_NAMES=$NODE_NAME
	fi
	
	for NAME in $NODE_NAMES  ; do

		FILE_NAME=$DATADIR/$SERVER/$NAME/$LOG_FILE
		if [ ! -f "${FILE_NAME}" ] ; then
			continue
		fi
		
		# Get the last date that import started:
		IMPORT_START_TIME=$(tac ${FILE_NAME} | grep -e '--' -m1 | awk '{print $2, $3}' | sed -e 's/^ *//' -e 's/ *$//')
		IMPORT_STARTING_TIME=$(tac ${FILE_NAME} | grep -e 'Starting'  -m 1 | awk '{print $1, $2}' | sed -e 's/^ *//' -e 's/ *$//')
		IMPORT_COMPLETED_TIME=$(tac ${FILE_NAME} | grep -e 'Completed'  -m 1 | awk '{print $1, $2}' | sed -e 's/^ *//' -e 's/ *$//')
		DURATION=$(( (  $(date -ud "${IMPORT_COMPLETED_TIME}" +'%s') -  $(date -ud "${IMPORT_STARTING_TIME}" +'%s') ) ))
		if [[ "${IMPORT_LATEST_TIME}" =~ ^[a-zA-Z] ]] ; then
			IMPORT_COMPLETED_TIME="Old format"
			FOUND_FILES=""
			FILES_REMAINING_NUMBER=""
			FILES_FAILED=""
			LAST_FILE=""
		else
			FOUND_FILES=$(tac ${FILE_NAME} | grep -e 'Found' -m 1 | awk '{print $3}')
			if [[ "${FOUND_FILES}" =~ ^\. ]] ; then
				FOUND_FILES="Old format"
				FILES_REMAINING_NUMBER=""
				FILES_FAILED=""
				LAST_FILE=""
			fi	
			#FILES_REMAINING=$(tac ${FILE_NAME} | grep -e 'Completed'  -m 1 | awk '{print $6, $8, $9}' | sed -e 's/^ *//' -e 's/ *$//')
			#FILES_REMAINING_NUMBER=$(echo $FILES_REMAINING | awk '{print $1}' | sed -e 's/^ *//' -e 's/ *$//')
			if [[ $(find $DATADIR/$SERVER/$NAME/$FILE_DIR/ -maxdepth 2 -name "*.xml") ]] ; then
				FILES_REMAINING_NUMBER=$(ls -l $DATADIR/$SERVER/$NAME/$FILE_DIR/*/*.xml | wc -l)
			else
				FILES_REMAINING_NUMBER=0
			fi
			FILES_FAILED=$(echo $FILES_REMAINING | sed 's/(//'  | awk '{print $2}' | sed -e 's/^ *//' -e 's/ *$//')
			LAST_FILE=$(tac ${FILE_NAME} | grep -e 'Completed'  -m 1 | awk '{print $5}' | sed -e 's/^ *//' -e 's/ *$//')
			LAST_FILE_TIME=$(echo ${LAST_FILE##*/} | sed -e 's/.dscdata.xml//' | date +%F%t%X)
			(( TOTAL_FILES_REMAINING = TOTAL_FILES_REMAINING + FILES_REMAINING_NUMBER ))
		fi
		
		tail ${FILE_NAME} -n 20 | grep -q -e 'Error' -i -c
		if [ $? -eq 0 ] ; then
			ERROR_STR="YES"
		else
			ERROR_STR="NO"
		fi
		printf '%-9s %-1s %-9s %-1s %-19s %-1s %-19s %-1s %-18s %-1s %-14s %-1s %-11s %-1s %-11s %-1s %-8s %-1s  %-15s\n'  "$SERVER" $FORMAT_SEP  "$NAME" $FORMAT_SEP "${IMPORT_COMPLETED_TIME}" $FORMAT_SEP "$IMPORT_LATEST_TIME" $FORMAT_SEP "$LAST_FILE_TIME" $FORMAT_SEP "$DURATION" $FORMAT_SEP "$FOUND_FILES" $FORMAT_SEP "$FILES_REMAINING_NUMBER" $FORMAT_SEP "$FILES_FAILED" $FORMAT_SEP "${ERROR_STR}"
	done
done
echo $FORMAT_STRING
echo "Total files remaining to import: " $TOTAL_FILES_REMAINING

