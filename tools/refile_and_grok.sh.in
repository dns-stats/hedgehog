#!/bin/bash
# 
# Copyright 2014 Internet Corporation for Assigned Names and Numbers.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Developed by Sinodun IT (www.sinodun.com)
#

#
# File: refile_and_grok.sh  
#

PROG=`basename "$0" .sh`

eval $(@BIN@/hedgehog_conf_read.sh)

set -e # exit if any command yields a non 0 exit status
WD=$hhconfig_directories_data
INPUT="XML"
OUTPUT="DB"
CONNSTR="dbname=$hhconfig_database_name dbport=$hhconfig_database_port"
START_DATE=""
RSSAC_FLAG="";
RESERVED_CPUS=0
DB_NAME="$hhconfig_database_name"
ARGS=""
LOG="dsc-extractor.out"
REQUIRED_API_VERSION=DB_VERSION

usage () {
    echo "${PROG} - finds all input files in working directory and processes to output format"
    echo 
    echo "-w Working directory to search for input files (default: ${WD})"
    echo "-i Input file format <XML|DAT> (default: ${INPUT})"
    echo "-o Output file format <DAT|DB> (default: ${OUTPUT})"
    echo "-c Non-interactive mode - use this flag when being run by a cron job"
    echo "-s Start date from which to process incoming data (XML input only)"
    echo "-r Disable processing of rssac data. Default is to process all data."
    echo "-R Reserved processors. Number of CPUS processors to exclude from import (default 0)."
    echo "-h Show this help."
    echo
}


while getopts ":w:i:o:cs:rR:h" opt; do
    case $opt in
        w  ) WD=$OPTARG ;;
        i  ) INPUT=$OPTARG ;;
        o  ) OUTPUT=$OPTARG ;;
        s  ) START_DATE="-s $OPTARG" ;;
        r  ) RSSAC_FLAG="-r" ;;
        R  ) RESERVED_CPUS=$OPTARG ;;
        c  ) CRON=1 ;;
        h  ) usage
             exit 1 ;;
        \? ) usage
             exit 1 ;;
    esac
done

[ $USER != $hhconfig_database_owner ] && echo "Must be $hhconfig_database_owner to run this script" && exit 1

DB_API_VERSION=`psql $DB_NAME  -tc  "select version from dsc.version;"`
[ $DB_API_VERSION != $REQUIRED_API_VERSION ] && echo "Error: Database API version incorrect." && exit 1

if ! [[ $RESERVED_CPUS =~ ^[0-9]+$ ]] ; then
	echo "Reserved CPUS ($RESERVED_CPUS) is not a positive number. Exiting"
	exit
fi
# Get number of real cores
export REAL_CPUS=`lscpu | grep -i Socket | awk -F: ' { if (total==0) total=1; total=total * $2; print total } ' | tail -1`
if [[ $RESERVED_CPUS -ge $REAL_CPUS ]] ; then
	echo "Reserved CPUS ($RESERVED_CPUS) is greater than or equal to the number of available CPUS ($REAL_CPUS). Exiting.... "
	exit
fi
# This option allows some CPUS to be reserved for the web front end in the case that the import is running continuously
CPUS=$((REAL_CPUS - RESERVED_CPUS ))
echo "Using $CPUS CPUS. ($REAL_CPUS available, $RESERVED_CPUS reserved.)"

if [[ "$INPUT" = "XML" || "$INPUT" = "DAT" ]] && [ "$OUTPUT" = "DB" ]
then
    ARGS="-i ${INPUT} -o PG_DB -c ${CONNSTR} ${START_DATE} ${RSSAC_FLAG}"
    LOG=`echo "$LOG" | sed 's/.out/-xml-db.out/'`
    if [ "$INPUT" == "DAT" ]
    then
        LOG=`echo "$LOG" | sed 's/xml/dat/'`
    fi
fi


if [ -z "$CRON" ]
then
    echo "Running ${PROG} ${INPUT}->${OUTPUT} from ${WD}"
    echo "ARGS = $ARGS"
    echo "LOG = $LOG"
    echo -n "Would you like to continue? y/N: "
    read c
    if [ "$c" != "Y" ] && [ "$c" != "y" ]
    then
        exit 1
    fi
fi

#set -x #Print commands just before execution - with all expansions and substitutions done, and words marked - useful for debugging.

cd "${WD}"
exec >$PROG.stdout
#exec 2>&1

echo "`date`-->SCRIPT COMMENCED"
EXECDIR=@BIN@
export EXECDIR SERVER
for SERVER in `psql $hhconfig_database_name -tc "select display_name from server;"` ; do
    test -L $SERVER && continue;
    test -d $SERVER || continue;
    ls "${SERVER}" | xargs -i --max-procs=$CPUS bash -c "[ -L \"${SERVER}/{}\" ] || ([ -d \"${SERVER}/{}\" ] && cd \"${SERVER}/{}\"; echo \"`date`-->START: ${SERVER}/{}\"; $EXECDIR/dsc-extractor ${ARGS} >> \"${LOG}\" 2>&1; echo \"`date`-->DONE: ${SERVER}/{}\")"
    # use below version instead to skip nodes that don't
    # have an incoming directory.  It is useful if you
    # receive pre-grokked data to this presenter, but
    # NOT useful if you need backward compatibility with
    # older collectors that do not put XMLs into an
    # incoming subdirectory
    # ls "${SERVER}" | xargs -i --max-procs=$CPUS bash -c "[ -L \"${SERVER}/{}\" ] || ([ -d \"${SERVER}/{}\" ] && [ -d \"${SERVER}/{}/incoming\" ] && cd \"${SERVER}/{}\"; echo \"`date`-->START: ${SERVER}/{}\"; $EXECDIR/dsc-extractor ${ARGS} >> \"${LOG}\" 2>&1; echo \"`date`-->DONE: ${SERVER}/{}\")"
done
echo "`date`-->SCRIPT COMPLETE"
