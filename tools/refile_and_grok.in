#!/bin/bash
# 
# Copyright 2014, 2015, 2016 Internet Corporation for Assigned Names and Numbers.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Developed by Sinodun IT (www.sinodun.com)
#

#
# File: refile_and_grok  
#

PROG=$(basename "$0" )

# We need a write user with access to the data dir
a=$(@LIBEXEC@/check_user_perms -wfc)
if [ $? -ne 0 ] ; then
	echo $a
	exit 1
fi
eval $a
export PGPASSWORD=$PGPASSWORD

set -e # exit if any command yields a non 0 exit status
WD="$DATADIR"
INPUT="XML"
OUTPUT="DB"
START_DATE=""
RSSAC_FLAG=""
RESERVED_CPUS=""
PROCESSES=""
ARGS=""
LOG="dsc-extractor.out"
APPEND_LOG=0


usage () {
    echo "${PROG} - finds all input files in working directory and processes to output format"
    echo 
    echo "-w Working directory to search for input files (default: ${WD})"
    echo
    echo "-i Input file format <XML|DAT> (default: ${INPUT})"
    echo
    echo "-o Output file format <DAT|DB> (default: ${OUTPUT})"
    echo
    echo "-c Non-interactive mode - use this flag when being run by a cron job"
    echo
    echo "-s Start date from which to process incoming data (XML input only)"
    echo
    echo "-r Disable processing of rssac data. Default is to process all data."
    echo
    echo "-R Reserved real cores. Number of CPU cores to exclude from import (default 0). Specify either -R or -P."
    echo
    echo "-P Number of processes to launch (default 1 per real CPU core). Specify either -R or -P."
    echo
    echo "-a Append output to the $PROG.stdout file (default is overwrite)"
    echo
    echo "-h Show this help."
    echo
}


while getopts ":w:i:o:cs:raR:P:h" opt; do
    case "$opt" in
        w  ) WD=$OPTARG ;;
        i  ) INPUT=$OPTARG ;;
        o  ) OUTPUT=$OPTARG ;;
        s  ) START_DATE="-s $OPTARG" ;;
        r  ) RSSAC_FLAG="-r" ;;
        R  ) RESERVED_CPUS=$OPTARG ;;
        P  ) PROCESSES=$OPTARG ;;
        c  ) CRON=1 ;;
        a  ) APPEND_LOG=1 ;;
        h  ) usage
             exit 1 ;;
        \? ) usage
             exit 1 ;;
    esac
done

if [[ -n "$RESERVED_CPUS"  &&  -n "$PROCESSES" ]] ; then
	echo "Reserved CPUs ($RESERVED_CPUS) and Number of processes ($PROCESSES) cannot both be specified. Exiting."
	exit
fi

if [[ -n "$PROCESSES"  &&  ! "$PROCESSES" =~ ^[0-9]+$ ]] ; then
	echo "Number of processes ($PROCESSES) is not a positive number. Exiting."
	exit
fi

if [[ -n "$RESERVED_CPUS"  && ! "$RESERVED_CPUS" =~ ^[0-9]+$ ]] ; then
	echo "Reserved CPUS ($RESERVED_CPUS) is not a positive number. Exiting."
	exit
fi
#
# if [[ -z "$RESERVED_CPUS" ]] ; then
#     RESERVED_CPUS=0
# fi

# Get number of real CPUs
export REAL_CPUS=$(lscpu | awk -F: 'BEGIN { IGNORECASE=1; total=1 } /socket/ { total=total * $2 } END { print total }')

# At this point we have either reserved or used or nothing set
if [[ -n "$RESERVED_CPUS" ]] ; then
    if [ "$RESERVED_CPUS" -ge "$REAL_CPUS" ] ; then
    	echo "Reserved CPUS ($RESERVED_CPUS) is greater than or equal to the number of available real CPUS ($REAL_CPUS). Exiting."
    	exit
    fi
    # This option allows some CPUS to be reserved for the web front end in the case that the import is running continuously
    CPUS=$(( REAL_CPUS - RESERVED_CPUS ))
    echo "Using $CPUS processes on $REAL_CPUS real CPUs ($RESERVED_CPUS real CPUs reserved)."
elif [[ -n "$PROCESSES" ]] ; then
    CPUS=$PROCESSES
    echo "Using $CPUS Processes as requested by user."
else
    # The user didn't specify anything so fallback to defaults
    CPUS=$REAL_CPUS
    echo "Using $CPUS processes on $CPUS real CPUs (no real CPUs reserved)."
fi


if [[ "$INPUT" = "XML" || "$INPUT" = "DAT" ]] && [ "$OUTPUT" = "DB" ]
then
    ARGS="-i ${INPUT} -o PG_DB -c \"${CONN_STRING_XX}\" ${START_DATE} ${RSSAC_FLAG}"
    LOG=${LOG/.out/-xml-db.out}
    [ "$INPUT" == "DAT" ] && LOG=${LOG/xml/dat}
fi


if [ -z "$CRON" ]
then
    echo "Running ${PROG} ${INPUT}->${OUTPUT} from ${WD}"
    echo "ARGS = $ARGS"
    echo "LOG = $LOG"
    echo -n "Would you like to continue? y/N: "
    read c
    [[ ! "$c" =~ ^(Y|y) ]] && exit 1
fi

#set -x #Print commands just before execution - with all expansions and substitutions done, and words marked - useful for debugging.

cd "${WD}"
if [ $APPEND_LOG -eq 1 ]; then
	exec >>"$PROG.stdout"
else 
	exec >"$PROG.stdout"
fi
#exec 2>&1

echo "$(date) SCRIPT COMMENCED"
BINDIR=@BIN@
export BINDIR SERVER
for SERVER in $(psql $CONN_STRING -tc "select display_name from server;") ; do
    [ -L "$SERVER" ] && continue
    [ -d "$SERVER" ] || continue
    ls "${SERVER}" | xargs -i --max-procs=$CPUS bash -c "[ -L \"${SERVER}/{}\" ] || ([ -d \"${SERVER}/{}\" ] && cd \"${SERVER}/{}\"; echo \"\$(date) START: ${SERVER}/{}\"; $BINDIR/dsc-extractor ${ARGS} >> \"${LOG}\" 2>&1; echo \"\$(date) DONE: ${SERVER}/{}\")"
    # use below version instead to skip nodes that don't
    # have an incoming directory.  It is useful if you
    # receive pre-grokked data to this presenter, but
    # NOT useful if you need backward compatibility with
    # older collectors that do not put XMLs into an
    # incoming subdirectory
    # ls "${SERVER}" | xargs -i --max-procs=$CPUS bash -c "[ -L \"${SERVER}/{}\" ] || ([ -d \"${SERVER}/{}\" ] && [ -d \"${SERVER}/{}/incoming\" ] && cd \"${SERVER}/{}\"; echo \"`date`-->START: ${SERVER}/{}\"; $BINDIR/dsc-extractor ${ARGS} >> \"${LOG}\" 2>&1; echo \"`date`-->DONE: ${SERVER}/{}\")"
done
echo "$(date) SCRIPT COMPLETE"
