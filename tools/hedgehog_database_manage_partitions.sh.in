#!/bin/bash
# 
# Copyright 2014 Internet Corporation for Assigned Names and Numbers.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Developed by Sinodun IT (www.sinodun.com)
#

# 
# File:   hedgehog_database_manage_partitions.sh
#

eval $(@BIN@/hedgehog_conf_read.pl)

REQUIRED_API_VERSION=DB_VERSION
DB_NAME=$hhconfig_database_name

usage () {
	echo
	echo "Create a new set of partitioned data tables in the database to hold imported data."
	echo "The partitions are created per month of data."
	echo
	echo "Usage: $0 options"
	echo
	echo "Supported options:"
	echo "	-p Date of partitions to create in YYYY-MM format (default is next month)."
	echo "	-h Show this help."
}

while getopts ":p:h" opt; do
    case $opt in
        p  ) PDATE=$OPTARG ;;
        h  ) usage
             exit 1 ;;
        \? ) usage
             exit 1 ;;
    esac
done

echo "`date`: $0 COMMENCED"

[ $USER != $hhconfig_database_owner ] && echo "Must be $hhconfig_database_owner to run this script" && exit 1

DB_API_VERSION=`psql $DB_NAME  -tc  "select version from dsc.version;"`
[ $DB_API_VERSION != $REQUIRED_API_VERSION ] && echo "Error: Database API version incorrect." && exit 1

if [ -z $PDATE ] ; then
    NOW=`date --date="+1 month" +%Y_%m`
    NEXT=`date --date="+2 month" +%Y_%m`
else
	# Validate the input date. Add day since (oddly) date won't parse just year and month
	date "+%Y-%m-%d" -d ${PDATE}-01 >/dev/null 2>&1
	is_valid=$?
	if [ ${is_valid} -ne 0 ] ; then
		echo "Error: The start date is not in the required format of YYYY-MM" 
		exit 1
	fi
	
    NOW=`date --date="$PDATE-01" +%Y_%m`
    
    IFS='_' read -a YM <<< "$NOW"
    YEAR=${YM[0]}
    MONTH=${YM[1]}
    NEXT="${YEAR}_`expr $MONTH + 1`"

    if [ $MONTH -eq 12 ] ; then
        NEXT=`expr ${YEAR} + 1`"_01"
    fi
fi

SERVERS=`psql -td $DB_NAME -c "SELECT name FROM dsc.server;"`
PLOTS=`psql -td $DB_NAME -c "SELECT name FROM dsc.dataset;"`

for server in $SERVERS
do
    s_id=`psql -td $DB_NAME -c "SELECT id FROM dsc.server WHERE name = '$server';"`
    for plot in $PLOTS
    do
      p_id=`psql -td $DB_NAME -c "SELECT id FROM dsc.dataset WHERE name = '$plot';"`
      
      psql $DB_NAME <<EOF
BEGIN;
set client_min_messages to WARNING;
CREATE TABLE dsc.data_${server}_${plot}_${NOW} (
  CHECK (starttime >= TIMESTAMP '$NOW-01 00:00:00' AT TIME ZONE 'UTC' AND starttime < TIMESTAMP '$NEXT-01 00:00:00' AT TIME ZONE 'UTC'),
  CHECK (plot_id = $p_id),
  CHECK (server_id = $s_id)
) INHERITS (dsc.data);

ALTER TABLE dsc.data_${server}_${plot}_${NOW}
        ADD CONSTRAINT pk_data_${server}_${plot}_${NOW} PRIMARY KEY (server_id, node_id , plot_id , starttime , key1, key2 ),
        ADD CONSTRAINT fk_data_${server}_${plot}_${NOW}_node FOREIGN KEY (node_id) REFERENCES dsc.node (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION,
        ADD CONSTRAINT fk_data_${server}_${plot}_${NOW}_plot FOREIGN KEY (plot_id) REFERENCES dsc.dataset (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION;
COMMIT;
EOF
    done
done

echo "`date`: $0 COMPLETED"
