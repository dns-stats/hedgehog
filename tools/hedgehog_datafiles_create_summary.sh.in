#!/bin/bash
# 
# Copyright 2014 Internet Corporation for Assigned Names and Numbers.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Developed by Sinodun IT (www.sinodun.com)
#

# 
# File:   hedgehog_datafiles_create_summary.sh
#

eval $(@BIN@/hedgehog_conf_read.pl)

DATADIR=$hhconfig_directories_data
LOG_FILE="dsc-extractor-xml-db.out"
NODE_NAME=""
SERVER_NAME=""
DB_NAME=$hhconfig_database_name
FORMAT_STRING="-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
FORMAT_SEP="|"

usage () {
	echo
	echo "Generate a processing report based on the information in the log files"
	echo 
	echo "Usage: $0 options"
	echo
	echo "Supported options:"
	echo "	-s Only report on the server with this name (default is all servers)"
	echo "	-n Only report on the node with this name (default is all nodes)"
	echo "	-c Output in csv format for import into spreadsheet application"
	echo "	-h Show this help."
}

while getopts ":s:n:ch" opt; do
    case $opt in
		n  ) NODE_NAME=$OPTARG ;;
		s  ) SERVER_NAME=$OPTARG ;;		
		c  ) FORMAT_STRING=""
		     FORMAT_SEP=',';;
        h  ) usage
             exit 1 ;;
        \? ) usage
             exit 1 ;;
    esac
done

[ $USER != $hhconfig_database_owner ] && echo "Must be $hhconfig_database_owner to run this script" && exit 1

SQ="'"
TOTAL_FILES_REMAINING=0

if [ -z "${SERVER_NAME}" ] ; then
	SERVER_NAMES=`ls -1 ${DATADIR}`
else 
	SERVER_NAMES=$SERVER_NAME
fi

echo $FORMAT_STRING
echo " Server  $FORMAT_SEP Node       $FORMAT_SEP Last import started $FORMAT_SEP Last file processed at $FORMAT_SEP Files found $FORMAT_SEP Files remaining $FORMAT_SEP Failures $FORMAT_SEP Last file processed                          $FORMAT_SEP Error found in last 20 lines of file" 
echo $FORMAT_STRING

for SERVER in $SERVER_NAMES ; do

	test -L $DATADIR/$SERVER && continue;
	test -d $DATADIR/$SERVER || continue;

	if [ -z "${NODE_NAME}" ] ; then
		NODE_NAMES=`ls -1 $DATADIR/$SERVER`
	else 
		NODE_NAMES=$NODE_NAME
	fi
	
	for NAME in $NODE_NAMES  ; do

		FILE_NAME=$DATADIR/$SERVER/$NAME/$LOG_FILE
		if [ ! -f ${FILE_NAME} ] ; then
			continue
		fi
		
		# Get the last date that import started:
		IMPORT_START_TIME=`tac ${FILE_NAME} | grep -e '--' -m1 | awk '{print $2, $3}' | sed -e 's/^ *//' -e 's/ *$//'`
		IMPORT_LATEST_TIME=`tac ${FILE_NAME} | grep -e 'Completed'  -m 1 | awk '{print $1, $2}' | sed -e 's/^ *//' -e 's/ *$//'`
		if [[ "${IMPORT_LATEST_TIME}" =~ ^[a-zA-Z] ]] ; then
			IMPORT_LATEST_TIME="Old format"
			FOUND_FILES=""
			FILES_REMAINING_NUMBER=""
			FILES_FAILED=""
			LAST_FILE=""
		else
			FOUND_FILES=`tac ${FILE_NAME} | grep -e 'Found' -m 1 | awk '{print $3}'`
			if [[ "${FOUND_FILES}" =~ ^\. ]] ; then
				FOUND_FILES="Old format"
				FILES_REMAINING_NUMBER=""
				FILES_FAILED=""
				LAST_FILE=""
			fi	
			FILES_REMAINING=`tac ${FILE_NAME} | grep -e 'Completed'  -m 1 | awk '{print $6, $8, $9}' | sed -e 's/^ *//' -e 's/ *$//' `
			FILES_REMAINING_NUMBER=`echo $FILES_REMAINING | awk '{print $1}' | sed -e 's/^ *//' -e 's/ *$//' `
			FILES_FAILED=`echo $FILES_REMAINING | sed 's/(//'  | awk '{print $2}' | sed -e 's/^ *//' -e 's/ *$//' `
			LAST_FILE=`tac ${FILE_NAME} | grep -e 'Completed'  -m 1 | awk '{print $5}' | sed -e 's/^ *//' -e 's/ *$//' `
			(( TOTAL_FILES_REMAINING = TOTAL_FILES_REMAINING + FILES_REMAINING_NUMBER ))		
		fi
		
		tail ${FILE_NAME} -n 20 | grep -q -e 'Error' -i -c
		if [ $? -eq 0 ] ; then
			ERROR_STR="YES"
		else
			ERROR_STR="NO"
		fi
		printf '%-9s %-1s %-9s %-1s %-19s %-1s %-22s %-1s %-11s %-1s %-15s %-1s %-8s %-1s %-44s %-1s %-15s\n'  "$SERVER" $FORMAT_SEP  "$NAME" $FORMAT_SEP "${IMPORT_START_TIME}" $FORMAT_SEP "$IMPORT_LATEST_TIME" $FORMAT_SEP "$FOUND_FILES" $FORMAT_SEP "$FILES_REMAINING_NUMBER" $FORMAT_SEP  "$FILES_FAILED" $FORMAT_SEP "$LAST_FILE" $FORMAT_SEP "${ERROR_STR}"
	done
done
echo $FORMAT_STRING
echo "Total files remaining to import: " $TOTAL_FILES_REMAINING

